{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"atlasOverview/","text":"Universal Components Kitparts Kitparts Base Kitparts Mod Kitparts Entities Tiles Effect Conditions Statmods Actor Attributes Races Roles Specialties","title":"Atlas"},{"location":"atlasOverview/#universal","text":"Components","title":"Universal"},{"location":"atlasOverview/#kitparts","text":"Kitparts Base Kitparts Mod Kitparts","title":"Kitparts"},{"location":"atlasOverview/#entities","text":"Tiles","title":"Entities"},{"location":"atlasOverview/#effect","text":"Conditions Statmods","title":"Effect"},{"location":"atlasOverview/#actor-attributes","text":"Races Roles Specialties","title":"Actor Attributes"},{"location":"cogsmosOverview/","text":"dioJSONes sokraTILES arisPROCGENes democrECS heGEL kANt mARx descARtes Ancient Engines Introduction A good core of our development happens in our four Frameworks for gameplay, named after ancient Philosopher just because i like Gnosis and bad puns. This is just a small introduction to their main usage and to give an Idea of their inner workings. DioJSONes for storage Gamedata Named after Diogenes of sinope,the cynic.Which means \"doglike\" in a litteral sense, he was an \"odd\" Philosopher who represented a simple live. just like his simple live, we want to give our content designer a comfortable time to designs actual elements while the other two of us are coding rules and logic. it services as a structured folder with JSON-files with some conventions and even some Keywords which will be interpreted to special functions like a random number generator by writing \" (RANGE) 3W20+5\" for example. The most important point is its dynamic constructor,its my try on a compromise on the easy but lacking in logic of Mark-up-languages and the broad possibillities of the scripting-language of Godot,which therefore needs at least a basic level of experience in software development. you can look up \"\" or even \"\" for more Informations to this Idea :) SokraTILEs for graphical Tilemap Which person is more suited for rendering the world and its inhabitants,than the man who also question them by their allegory of the cave. We had some hard choices to make,on the one hand: we want to develop whereever the road takes us,so an abstract Map like dwarf fortress would be usefull.On the other hand,we also want to give as much people as possible to at least try out our,so this kind of artstyle is exactly the hardest to get. SokraTILEs is a weird lovechild of both worlds,highly recycling its assets but still with a grip in a visually pleasing world. it also uses the Tiled!-editor what means there are plenty of ways to mod each tile and even to draw your own maps. The Tileset can be dynamicly appended by just drawing them on a separate PNG , adding properties in Tiled and dragging and dropping them into the corresponding folder DemocrECTS for procedural/modular Game-elements Democretus lived around 400 BC and got a weird idea: \"what if every we can precive is made out such tiny things we can not physically see\". His take on atomism was mindblowing for his time,so it would make sense to use its idea for our ECS. long story short: an ECS is a special type of saving data which makes them so barebones and independent,it can be combined with another to get new symbiotic effects. just like atoms,they are so abstract that they are not splittable any further. this,ecspecially in combination to the other three frameworks,we can design possible interactions,whether than actual scenes.there is a highly likely chance you will discover something in your playthrough we did not even know, not even intendend to implement. AresPROCGENes for procedural/modular Game-elements if DemocrECTS enables the small but weird Items you can carry and spells you can cast, AresPROCGENes does the heavy lifting to amp it up to an entropic eleven.It manages the generation of the 100x100 Area where you move,fills it with interesting buildings and persons, and gives you new intereseting challenges on the next one.","title":"Framework"},{"location":"cogsmosOverview/#ancient-engines","text":"","title":"Ancient Engines"},{"location":"cogsmosOverview/#introduction","text":"A good core of our development happens in our four Frameworks for gameplay, named after ancient Philosopher just because i like Gnosis and bad puns. This is just a small introduction to their main usage and to give an Idea of their inner workings.","title":"Introduction"},{"location":"cogsmosOverview/#diojsones-for-storage-gamedata","text":"Named after Diogenes of sinope,the cynic.Which means \"doglike\" in a litteral sense, he was an \"odd\" Philosopher who represented a simple live. just like his simple live, we want to give our content designer a comfortable time to designs actual elements while the other two of us are coding rules and logic. it services as a structured folder with JSON-files with some conventions and even some Keywords which will be interpreted to special functions like a random number generator by writing \" (RANGE) 3W20+5\" for example. The most important point is its dynamic constructor,its my try on a compromise on the easy but lacking in logic of Mark-up-languages and the broad possibillities of the scripting-language of Godot,which therefore needs at least a basic level of experience in software development. you can look up \"\" or even \"\" for more Informations to this Idea :)","title":"DioJSONes for storage Gamedata"},{"location":"cogsmosOverview/#sokratiles-for-graphical-tilemap","text":"Which person is more suited for rendering the world and its inhabitants,than the man who also question them by their allegory of the cave. We had some hard choices to make,on the one hand: we want to develop whereever the road takes us,so an abstract Map like dwarf fortress would be usefull.On the other hand,we also want to give as much people as possible to at least try out our,so this kind of artstyle is exactly the hardest to get. SokraTILEs is a weird lovechild of both worlds,highly recycling its assets but still with a grip in a visually pleasing world. it also uses the Tiled!-editor what means there are plenty of ways to mod each tile and even to draw your own maps. The Tileset can be dynamicly appended by just drawing them on a separate PNG , adding properties in Tiled and dragging and dropping them into the corresponding folder","title":"SokraTILEs for graphical Tilemap"},{"location":"cogsmosOverview/#democrects-for-proceduralmodular-game-elements","text":"Democretus lived around 400 BC and got a weird idea: \"what if every we can precive is made out such tiny things we can not physically see\". His take on atomism was mindblowing for his time,so it would make sense to use its idea for our ECS. long story short: an ECS is a special type of saving data which makes them so barebones and independent,it can be combined with another to get new symbiotic effects. just like atoms,they are so abstract that they are not splittable any further. this,ecspecially in combination to the other three frameworks,we can design possible interactions,whether than actual scenes.there is a highly likely chance you will discover something in your playthrough we did not even know, not even intendend to implement.","title":"DemocrECTS for procedural/modular Game-elements"},{"location":"cogsmosOverview/#aresprocgenes-for-proceduralmodular-game-elements","text":"if DemocrECTS enables the small but weird Items you can carry and spells you can cast, AresPROCGENes does the heavy lifting to amp it up to an entropic eleven.It manages the generation of the 100x100 Area where you move,fills it with interesting buildings and persons, and gives you new intereseting challenges on the next one.","title":"AresPROCGENes for procedural/modular Game-elements"},{"location":"conventionsOverview/","text":"Code Styling Module Structure Enums Naming","title":"Conventions"},{"location":"entitiesOverview/","text":"Tiles Interact Actor Kitpart Effect Condition Symbiotic Introduction Entities are usually simple data-container for a composition, however we append their capabillities to an extend by saving specific Components in variables and by declaring some function. Our Main reason is readabillity, calling getComponents does not only takesup some space,its even needs a string (native name variable of Component) which worsens said first and makes it prone to exceptions. To indicate that they are to use like variables,their name is plain simple the variable with brackets, i.e: entity.position() Therefor,we call them often by a proxy function to clear up and increase Stabillity.","title":"Game-elements"},{"location":"entitiesOverview/#introduction","text":"Entities are usually simple data-container for a composition, however we append their capabillities to an extend by saving specific Components in variables and by declaring some function. Our Main reason is readabillity, calling getComponents does not only takesup some space,its even needs a string (native name variable of Component) which worsens said first and makes it prone to exceptions. To indicate that they are to use like variables,their name is plain simple the variable with brackets, i.e: entity.position() Therefor,we call them often by a proxy function to clear up and increase Stabillity.","title":"Introduction"},{"location":"modulesOverview/","text":"001 - Atlas 002 - Tilemap Structure 003 - Entropy 004 - KitSet 005 - 006 - Player 007 - Effect Generator 008 - Conditions 009 - Statmods 010 - Tilemap Selector 011 - Procgen Actor 012 - Procgen Chunk 013 - Procgen Loot 014 - Behavior 015 - Items 016 - Ruleset Injector","title":"Modules"},{"location":"syntaxOverview/","text":"Effect Overview Effect Details Loot Tables","title":"Syntax"},{"location":"tags/","text":"Tags Following is a list of relevant tags: [TAGS] - test","title":"Tags"},{"location":"tags/#tags","text":"Following is a list of relevant tags: [TAGS] - test","title":"Tags"},{"location":"Atlas/kitparts/","text":"Cyberwares Hacks Finger Guns name value description silenced pistole installed in your index finger. a Community favorite of professional Hitman and eccentric Gays mechanicalSummary opens Sec1 doors cooldownTime 4 rarity 3 modTime 2 #### Mods: Door lock name value description When you don't want the mafia in your living room mechanicalSummary Lock nearby doors cooldownTime 8 rarity 3 modTime 3 #### Mods: Doorkey Spoofer name value description A HomeSec apprentice accidentily posted their account password on P2.1,almost like an inivitation for readers into the homes of his customers mechanicalSummary opens Sec1 doors cooldownTime 4 rarity 3 modTime 2 #### Mods: [Node:3350] opens Sec2 doors Heartbleed-Bug name value description This well known hack, causes heart-implants to overcharge and electronics untill the heart cant keep up the pace and explodes. Its sudden and gruesome death was feared by citizens in the early days of internal cyberware and the go-to argument of Naturalistic activists mechanicalSummary -20 hitpoints cooldownTime 5 rarity 5 modTime 5 #### Mods: Drones Infusions 4th Wallbreak name value description //TODO: add description mechanicalSummary deals 10 structure-pointts damage, 20 for thin walls cooldownTime 1 rarity 3 modTime 2 #### Mods: Spells Crispyfier name value description this lesser flamethrow is often mocked by the spellcaster-community by this ridiculous name.however,they still tend to flinch when it gets thrown on them mechanicalSummary Burns grass and People cooldownTime 4 rarity 3 modTime 2 #### Mods: Earthwall name value description mechanicalSummary pulls up a wall of earth cooldownTime 8 rarity 4 modTime 3 #### Mods: offensive insult name value description Intimidates your enemies into an embarrassing accident mechanicalSummary Spawns a 2x2 puddle of water cooldownTime 4 rarity 4 modTime 2 #### Mods: Rites Meeles Viking bycicle helmet name value description once a mandatory protetction in sweden,now worn by the bycicle infantry mechanicalSummary cooldownTime 0 rarity 0 modTime #### Mods: Guns T-Shirt Cannon name value description TOTAL RECALL: MAY SHOOT CAUSE OF FIRMWARE-BUG STRRAIGHTJACKETS mechanicalSummary deals 3 damage, takes abillity to move for 3 actions cooldownTime 2 rarity 3 modTime 2 #### Mods: Armors","title":"Cyberwares"},{"location":"Atlas/kitparts/#cyberwares","text":"","title":"Cyberwares"},{"location":"Atlas/kitparts/#hacks","text":"","title":"Hacks"},{"location":"Atlas/kitparts/#finger-guns","text":"name value description silenced pistole installed in your index finger. a Community favorite of professional Hitman and eccentric Gays mechanicalSummary opens Sec1 doors cooldownTime 4 rarity 3 modTime 2 #### Mods:","title":"Finger Guns"},{"location":"Atlas/kitparts/#door-lock","text":"name value description When you don't want the mafia in your living room mechanicalSummary Lock nearby doors cooldownTime 8 rarity 3 modTime 3 #### Mods:","title":"Door lock"},{"location":"Atlas/kitparts/#doorkey-spoofer","text":"name value description A HomeSec apprentice accidentily posted their account password on P2.1,almost like an inivitation for readers into the homes of his customers mechanicalSummary opens Sec1 doors cooldownTime 4 rarity 3 modTime 2 #### Mods: [Node:3350] opens Sec2 doors","title":"Doorkey Spoofer"},{"location":"Atlas/kitparts/#heartbleed-bug","text":"name value description This well known hack, causes heart-implants to overcharge and electronics untill the heart cant keep up the pace and explodes. Its sudden and gruesome death was feared by citizens in the early days of internal cyberware and the go-to argument of Naturalistic activists mechanicalSummary -20 hitpoints cooldownTime 5 rarity 5 modTime 5 #### Mods:","title":"Heartbleed-Bug"},{"location":"Atlas/kitparts/#drones","text":"","title":"Drones"},{"location":"Atlas/kitparts/#infusions","text":"","title":"Infusions"},{"location":"Atlas/kitparts/#4th-wallbreak","text":"name value description //TODO: add description mechanicalSummary deals 10 structure-pointts damage, 20 for thin walls cooldownTime 1 rarity 3 modTime 2 #### Mods:","title":"4th Wallbreak"},{"location":"Atlas/kitparts/#spells","text":"","title":"Spells"},{"location":"Atlas/kitparts/#crispyfier","text":"name value description this lesser flamethrow is often mocked by the spellcaster-community by this ridiculous name.however,they still tend to flinch when it gets thrown on them mechanicalSummary Burns grass and People cooldownTime 4 rarity 3 modTime 2 #### Mods:","title":"Crispyfier"},{"location":"Atlas/kitparts/#earthwall","text":"name value description mechanicalSummary pulls up a wall of earth cooldownTime 8 rarity 4 modTime 3 #### Mods:","title":"Earthwall"},{"location":"Atlas/kitparts/#offensive-insult","text":"name value description Intimidates your enemies into an embarrassing accident mechanicalSummary Spawns a 2x2 puddle of water cooldownTime 4 rarity 4 modTime 2 #### Mods:","title":"offensive insult"},{"location":"Atlas/kitparts/#rites","text":"","title":"Rites"},{"location":"Atlas/kitparts/#meeles","text":"","title":"Meeles"},{"location":"Atlas/kitparts/#viking-bycicle-helmet","text":"name value description once a mandatory protetction in sweden,now worn by the bycicle infantry mechanicalSummary cooldownTime 0 rarity 0 modTime #### Mods:","title":"Viking bycicle helmet"},{"location":"Atlas/kitparts/#guns","text":"","title":"Guns"},{"location":"Atlas/kitparts/#t-shirt-cannon","text":"name value description TOTAL RECALL: MAY SHOOT CAUSE OF FIRMWARE-BUG STRRAIGHTJACKETS mechanicalSummary deals 3 damage, takes abillity to move for 3 actions cooldownTime 2 rarity 3 modTime 2 #### Mods:","title":"T-Shirt Cannon"},{"location":"Atlas/kitparts/#armors","text":"","title":"Armors"},{"location":"Cogsmos/arisPROCGENes/","text":"dioJSONes Convention Types Constructors Introduction dioJSONes is my attempt of a compromise between Developer and Contentdesigner. while developers have the necessary knowledge of Programming language and experience to implement functions of features, they therefore have a lack of time to use this to implement instances of features in a game. Contentdesigners have creative ideas and intuition for game elements but therefore no knowledge in the areas of development. dioJSONes defines a set of naming conventions and special keywords which will be interpretet at the parsing of JSONs for special uses. i.e: * Constructors to instanciate Entities * Inheritance of other JSON-files * Systematic structure of data Convention Needed Keys * Each object needs a type-key which defines how DioJSONes will parse and interpret data into the game. see the list of types for reference. * Each object needs an id-key to make them retraceable. more info to its syntax is further down. { \"type\": \"skill\", \"name\": \"acrobatics\", \"ID\": \"acrobatics_skill\" } common keys meaning ID unique String to Identify data Name one worded description for reference Description Text which will be shown to player for more information Template For comfort and to minimice parsing errors,every type of JSON-files has in its folder a Template. make sure to copy it into a new Textfile and customice the placeholder to your actual content. Units | Abbrevation | meaning | |--|--| | | | Comments To add a explanation of an Entry,type a new one above itself with the key \"//\" with the number of comment and your explanation as value. { \"//1\": \"this is a comment to give an example of the syntax\" } Key-Naming the usual conevntion for porgrammers is to \"separate\" variables by camelCase (i.e \"theQuickBrownFoxJumpsOverTheLazyDog\"). but it may take some time to get used to it.So for comfort,Contentdesigner can use snake_case, i.e: { \"syntax\":\"the_quick_brown_fox_jumps_over_the_lazy_dog\" } note : every word is written in lower case and the underscore happens at the front of the second word. explanation : a underscore symbolices something is not overaching but closely relatet to the word before it ID-Naming like state,ID are very important,and even more is a static and reliable naming of them. an ID starts with its grouping,groupings are sequentiall names of subfolders,separated with an take away(-) in example: the data of upper_leg.json in \"Config/Anatomy/metahuman/\" { \"grouping_example\":\"A-Metahuman-\" } note : groupings are Capitaliced explanation : the take away symbolices in comparrison to the underscore a overaching thing which can have many things (in this case arms or heads) under itself. the the subfolders before the last are cut short to their first letter. after groupings,what follows is the name of the JSON-File itself. in example: the data of upper_leg.json in \"Config/Anatomy/metahuman/\" { \"whole_ID\":\"Anatomy-Metahuman-upper_leg\" } Constructors sometimes its usefull to have json defined thing in an other json,for example can we modify stats by Types Types Description Anatomy Bodyparts of diffrent races ASCII_Art Predefined texts Chunk_Keywords Keywords for attributes of Chunk Conditions Effects on the Body by external factors >Entities_Attributes ET_Race Attributes of diffrent Races ET_Roles Attributes of diffrent Roles ET_Specialties Attributes of diffrent Specialties Factions groups of people Flags valueless Components for plausibillity-checks >Items I_Consumables one time use items >Kits >>K_Electronics >>>K_E_Cyberware K_E_C_Model Effect of Cyberware K_E_C_Integration Appliance of Cyberware K_E_C_Appendix Customiced expansion >>>K_E_Drone K_E_D_Frame basemodell of Drone K_E_D_Movement i.e propellent or wheels K_E_D_Sensor i.e Infrared sight or sonar hearing >>>K_E_Hack K_E_H_Daemon Effect of Hack K_E_H_Target i.e data, persona or device K_E_H_Appendix Customiced expansion >>K_Magic >>>K_M_Infusion K_M_I_Power Effect of Infusion K_M_I_Bodypart Anatomical placement K_M_I_Appendix Customiced expansion >>>K_M_Spell K_M_S_Formular Effect of Spell K_M_S_Medium movement of map i.e instant or area K_M_S_Appendix Customiced expansion >>>K_M_Conjuration K_M_C_Force Effect of Cyberware K_M_C_Behavior priority i.e healing K_M_C_Appendix Customiced expansion >>K_Universal >>>K_U_Armor K_U_A_Coating protection of external factors K_U_A_Matterial protection of damage K_U_A_Appendix Customiced expansion >>>K_U_Gun K_U_G_Frame basemodell of Gun K_U_A_Sight effective range K_U_A_Ammunation damagetype >>>K_U_Meele K_U_M_Hitzone i.e blunt or sharp or punctual K_U_A_Shaft i.e handguard K_U_A_Appendix Customiced expansion >Loot_Tables LT_Object probabillity of items i.e crates or save LT_Entities probabillity of items i.e corpses Statistics Stats of last Playthrough >Meta >>M_Archivements Milestones which player has reached in a game once","title":"arisPROCGENes"},{"location":"Cogsmos/arisPROCGENes/#diojsones","text":"Convention Types Constructors","title":"dioJSONes"},{"location":"Cogsmos/arisPROCGENes/#introduction","text":"dioJSONes is my attempt of a compromise between Developer and Contentdesigner. while developers have the necessary knowledge of Programming language and experience to implement functions of features, they therefore have a lack of time to use this to implement instances of features in a game. Contentdesigners have creative ideas and intuition for game elements but therefore no knowledge in the areas of development. dioJSONes defines a set of naming conventions and special keywords which will be interpretet at the parsing of JSONs for special uses. i.e: * Constructors to instanciate Entities * Inheritance of other JSON-files * Systematic structure of data","title":"Introduction"},{"location":"Cogsmos/arisPROCGENes/#convention","text":"Needed Keys * Each object needs a type-key which defines how DioJSONes will parse and interpret data into the game. see the list of types for reference. * Each object needs an id-key to make them retraceable. more info to its syntax is further down. { \"type\": \"skill\", \"name\": \"acrobatics\", \"ID\": \"acrobatics_skill\" } common keys meaning ID unique String to Identify data Name one worded description for reference Description Text which will be shown to player for more information Template For comfort and to minimice parsing errors,every type of JSON-files has in its folder a Template. make sure to copy it into a new Textfile and customice the placeholder to your actual content. Units | Abbrevation | meaning | |--|--| | | | Comments To add a explanation of an Entry,type a new one above itself with the key \"//\" with the number of comment and your explanation as value. { \"//1\": \"this is a comment to give an example of the syntax\" } Key-Naming the usual conevntion for porgrammers is to \"separate\" variables by camelCase (i.e \"theQuickBrownFoxJumpsOverTheLazyDog\"). but it may take some time to get used to it.So for comfort,Contentdesigner can use snake_case, i.e: { \"syntax\":\"the_quick_brown_fox_jumps_over_the_lazy_dog\" } note : every word is written in lower case and the underscore happens at the front of the second word. explanation : a underscore symbolices something is not overaching but closely relatet to the word before it ID-Naming like state,ID are very important,and even more is a static and reliable naming of them. an ID starts with its grouping,groupings are sequentiall names of subfolders,separated with an take away(-) in example: the data of upper_leg.json in \"Config/Anatomy/metahuman/\" { \"grouping_example\":\"A-Metahuman-\" } note : groupings are Capitaliced explanation : the take away symbolices in comparrison to the underscore a overaching thing which can have many things (in this case arms or heads) under itself. the the subfolders before the last are cut short to their first letter. after groupings,what follows is the name of the JSON-File itself. in example: the data of upper_leg.json in \"Config/Anatomy/metahuman/\" { \"whole_ID\":\"Anatomy-Metahuman-upper_leg\" }","title":"Convention"},{"location":"Cogsmos/arisPROCGENes/#constructors","text":"sometimes its usefull to have json defined thing in an other json,for example can we modify stats by","title":"Constructors"},{"location":"Cogsmos/arisPROCGENes/#types","text":"Types Description Anatomy Bodyparts of diffrent races ASCII_Art Predefined texts Chunk_Keywords Keywords for attributes of Chunk Conditions Effects on the Body by external factors >Entities_Attributes ET_Race Attributes of diffrent Races ET_Roles Attributes of diffrent Roles ET_Specialties Attributes of diffrent Specialties Factions groups of people Flags valueless Components for plausibillity-checks >Items I_Consumables one time use items >Kits >>K_Electronics >>>K_E_Cyberware K_E_C_Model Effect of Cyberware K_E_C_Integration Appliance of Cyberware K_E_C_Appendix Customiced expansion >>>K_E_Drone K_E_D_Frame basemodell of Drone K_E_D_Movement i.e propellent or wheels K_E_D_Sensor i.e Infrared sight or sonar hearing >>>K_E_Hack K_E_H_Daemon Effect of Hack K_E_H_Target i.e data, persona or device K_E_H_Appendix Customiced expansion >>K_Magic >>>K_M_Infusion K_M_I_Power Effect of Infusion K_M_I_Bodypart Anatomical placement K_M_I_Appendix Customiced expansion >>>K_M_Spell K_M_S_Formular Effect of Spell K_M_S_Medium movement of map i.e instant or area K_M_S_Appendix Customiced expansion >>>K_M_Conjuration K_M_C_Force Effect of Cyberware K_M_C_Behavior priority i.e healing K_M_C_Appendix Customiced expansion >>K_Universal >>>K_U_Armor K_U_A_Coating protection of external factors K_U_A_Matterial protection of damage K_U_A_Appendix Customiced expansion >>>K_U_Gun K_U_G_Frame basemodell of Gun K_U_A_Sight effective range K_U_A_Ammunation damagetype >>>K_U_Meele K_U_M_Hitzone i.e blunt or sharp or punctual K_U_A_Shaft i.e handguard K_U_A_Appendix Customiced expansion >Loot_Tables LT_Object probabillity of items i.e crates or save LT_Entities probabillity of items i.e corpses Statistics Stats of last Playthrough >Meta >>M_Archivements Milestones which player has reached in a game once","title":"Types"},{"location":"Cogsmos/democrECS/","text":"democrECS Introduction Named after Democitus and his atomic theory, This System is about modularicing and composing of unique Game-elements. ECS stands for Entity-Component-System and is a Data-oriented Design for fast loading and flexible instances. Here a short summary of those three things: E ntity Is an object with diffrent kinds of Dictionaries full of Components like a collection/composition referenced by its Object-id C omponent Is an object with just one value, this is our replacement for private variables of instances S ystem Is an Object which replaces the functions of an instance. This System is shared between all Entities Getting Started Entities function Return Type Notation getCompValue(String) not typed list of Children can be found in COMP.ATLAS_INDEX_COMP getCompTempValue(String, String) not typed 1st Parameter : name of Template 2nd Parameter : name of Component addComponent(Component-child) void list of Children can be found in COMP.ATLAS_INDEX_COMP addTemplate(String,Entity) void list of Children can be found in COMP.ATLAS_INDEX_COMP removeComponent(String) void free() the component and deletes itself from List Personal changes to the design functioncalls for variable-references due to readabillity, we choose to append Entities by proxy-like functions. Every advanced Entity has some lowest common anominator (for example every TileEntity has the Component C_1_ANY_IS_WALKABLE ). Instead of: var isWalkable = tileToWalkOn.getComponent(\"C_1_ANY_IS_WALKABLE\").value; We recommend: var isWalkable = tileToWalkOn.isWalkable(); predefined sets of Component as Templates sometimes there is a pattern of reacurring Components (for example every Actor has 4 Physical Attirbutes). Instead Of: var dwarfActor = ActorEntity.new(); var compBase = \"C_X_ATTRIBUTE_\" var attributesValues = [4,4,3,1]; # stats of Dwarf var attributesComponents = [\"STRENGH\",\"REACTION,\"CONSTITUTION\",\"AGILLITY\"]; for i in attributesComponents.size(): var currentCompToString = compBase + attributesComponent[i] var currentCompValue = attributesValues[i] var componentclass = COMP.ATLAS_INDEX_COMP.GET(currentAttributeToString) var currentBodyPart = componentClass.new(currentCompValue); dwarfActor.addComponent(component); print( dwarfActor.getCompValue(\"C_X_ATTIBUTE_STRENGTH) ) We recommend: var dwarfActor = Entity.new(); var dwarfTemplate = API_001_Atlas.RaceAtlas()[\"DWARF\"] dwarfActor.addTemplate(\"DWARF\",dwarfTemplate) print( dwarfActor.getCompTempValue(\"DWARF\",\"C_X_ATTRIBUTE_STRENGH\") ) This is a reference by pointer and is ideal for instances of Comps where it is unlikely to be used in the near future. in case of value-change, we instanciate this Component beforehand and use them in the usual way.","title":"democrECS"},{"location":"Cogsmos/democrECS/#democrecs","text":"","title":"democrECS"},{"location":"Cogsmos/democrECS/#introduction","text":"Named after Democitus and his atomic theory, This System is about modularicing and composing of unique Game-elements. ECS stands for Entity-Component-System and is a Data-oriented Design for fast loading and flexible instances. Here a short summary of those three things: E ntity Is an object with diffrent kinds of Dictionaries full of Components like a collection/composition referenced by its Object-id C omponent Is an object with just one value, this is our replacement for private variables of instances S ystem Is an Object which replaces the functions of an instance. This System is shared between all Entities","title":"Introduction"},{"location":"Cogsmos/democrECS/#getting-started","text":"","title":"Getting Started"},{"location":"Cogsmos/democrECS/#entities","text":"","title":"Entities"},{"location":"Cogsmos/democrECS/#personal-changes-to-the-design","text":"","title":"Personal changes to the design"},{"location":"Cogsmos/democrECS/#functioncalls-for-variable-references","text":"due to readabillity, we choose to append Entities by proxy-like functions. Every advanced Entity has some lowest common anominator (for example every TileEntity has the Component C_1_ANY_IS_WALKABLE ). Instead of: var isWalkable = tileToWalkOn.getComponent(\"C_1_ANY_IS_WALKABLE\").value; We recommend: var isWalkable = tileToWalkOn.isWalkable();","title":"functioncalls for variable-references"},{"location":"Cogsmos/democrECS/#predefined-sets-of-component-as-templates","text":"sometimes there is a pattern of reacurring Components (for example every Actor has 4 Physical Attirbutes). Instead Of: var dwarfActor = ActorEntity.new(); var compBase = \"C_X_ATTRIBUTE_\" var attributesValues = [4,4,3,1]; # stats of Dwarf var attributesComponents = [\"STRENGH\",\"REACTION,\"CONSTITUTION\",\"AGILLITY\"]; for i in attributesComponents.size(): var currentCompToString = compBase + attributesComponent[i] var currentCompValue = attributesValues[i] var componentclass = COMP.ATLAS_INDEX_COMP.GET(currentAttributeToString) var currentBodyPart = componentClass.new(currentCompValue); dwarfActor.addComponent(component); print( dwarfActor.getCompValue(\"C_X_ATTIBUTE_STRENGTH) ) We recommend: var dwarfActor = Entity.new(); var dwarfTemplate = API_001_Atlas.RaceAtlas()[\"DWARF\"] dwarfActor.addTemplate(\"DWARF\",dwarfTemplate) print( dwarfActor.getCompTempValue(\"DWARF\",\"C_X_ATTRIBUTE_STRENGH\") ) This is a reference by pointer and is ideal for instances of Comps where it is unlikely to be used in the near future. in case of value-change, we instanciate this Component beforehand and use them in the usual way.","title":"predefined sets of Component as Templates"},{"location":"Cogsmos/descARtes/","text":"dioJSONes Convention Types Constructors Introduction dioJSONes is my attempt of a compromise between Developer and Contentdesigner. while developers have the necessary knowledge of Programming language and experience to implement functions of features, they therefore have a lack of time to use this to implement instances of features in a game. Contentdesigners have creative ideas and intuition for game elements but therefore no knowledge in the areas of development. dioJSONes defines a set of naming conventions and special keywords which will be interpretet at the parsing of JSONs for special uses. i.e: * Constructors to instanciate Entities * Inheritance of other JSON-files * Systematic structure of data Convention Needed Keys * Each object needs a type-key which defines how DioJSONes will parse and interpret data into the game. see the list of types for reference. * Each object needs an id-key to make them retraceable. more info to its syntax is further down. { \"type\": \"skill\", \"name\": \"acrobatics\", \"ID\": \"acrobatics_skill\" } common keys meaning ID unique String to Identify data Name one worded description for reference Description Text which will be shown to player for more information Template For comfort and to minimice parsing errors,every type of JSON-files has in its folder a Template. make sure to copy it into a new Textfile and customice the placeholder to your actual content. Units | Abbrevation | meaning | |--|--| | | | Comments To add a explanation of an Entry,type a new one above itself with the key \"//\" with the number of comment and your explanation as value. { \"//1\": \"this is a comment to give an example of the syntax\" } Key-Naming the usual conevntion for porgrammers is to \"separate\" variables by camelCase (i.e \"theQuickBrownFoxJumpsOverTheLazyDog\"). but it may take some time to get used to it.So for comfort,Contentdesigner can use snake_case, i.e: { \"syntax\":\"the_quick_brown_fox_jumps_over_the_lazy_dog\" } note : every word is written in lower case and the underscore happens at the front of the second word. explanation : a underscore symbolices something is not overaching but closely relatet to the word before it ID-Naming like state,ID are very important,and even more is a static and reliable naming of them. an ID starts with its grouping,groupings are sequentiall names of subfolders,separated with an take away(-) in example: the data of upper_leg.json in \"Config/Anatomy/metahuman/\" { \"grouping_example\":\"A-Metahuman-\" } note : groupings are Capitaliced explanation : the take away symbolices in comparrison to the underscore a overaching thing which can have many things (in this case arms or heads) under itself. the the subfolders before the last are cut short to their first letter. after groupings,what follows is the name of the JSON-File itself. in example: the data of upper_leg.json in \"Config/Anatomy/metahuman/\" { \"whole_ID\":\"Anatomy-Metahuman-upper_leg\" } Constructors sometimes its usefull to have json defined thing in an other json,for example can we modify stats by Types Types Description Anatomy Bodyparts of diffrent races ASCII_Art Predefined texts Chunk_Keywords Keywords for attributes of Chunk Conditions Effects on the Body by external factors >Entities_Attributes ET_Race Attributes of diffrent Races ET_Roles Attributes of diffrent Roles ET_Specialties Attributes of diffrent Specialties Factions groups of people Flags valueless Components for plausibillity-checks >Items I_Consumables one time use items >Kits >>K_Electronics >>>K_E_Cyberware K_E_C_Model Effect of Cyberware K_E_C_Integration Appliance of Cyberware K_E_C_Appendix Customiced expansion >>>K_E_Drone K_E_D_Frame basemodell of Drone K_E_D_Movement i.e propellent or wheels K_E_D_Sensor i.e Infrared sight or sonar hearing >>>K_E_Hack K_E_H_Daemon Effect of Hack K_E_H_Target i.e data, persona or device K_E_H_Appendix Customiced expansion >>K_Magic >>>K_M_Infusion K_M_I_Power Effect of Infusion K_M_I_Bodypart Anatomical placement K_M_I_Appendix Customiced expansion >>>K_M_Spell K_M_S_Formular Effect of Spell K_M_S_Medium movement of map i.e instant or area K_M_S_Appendix Customiced expansion >>>K_M_Conjuration K_M_C_Force Effect of Cyberware K_M_C_Behavior priority i.e healing K_M_C_Appendix Customiced expansion >>K_Universal >>>K_U_Armor K_U_A_Coating protection of external factors K_U_A_Matterial protection of damage K_U_A_Appendix Customiced expansion >>>K_U_Gun K_U_G_Frame basemodell of Gun K_U_A_Sight effective range K_U_A_Ammunation damagetype >>>K_U_Meele K_U_M_Hitzone i.e blunt or sharp or punctual K_U_A_Shaft i.e handguard K_U_A_Appendix Customiced expansion >Loot_Tables LT_Object probabillity of items i.e crates or save LT_Entities probabillity of items i.e corpses Statistics Stats of last Playthrough >Meta >>M_Archivements Milestones which player has reached in a game once","title":"descARtes"},{"location":"Cogsmos/descARtes/#diojsones","text":"Convention Types Constructors","title":"dioJSONes"},{"location":"Cogsmos/descARtes/#introduction","text":"dioJSONes is my attempt of a compromise between Developer and Contentdesigner. while developers have the necessary knowledge of Programming language and experience to implement functions of features, they therefore have a lack of time to use this to implement instances of features in a game. Contentdesigners have creative ideas and intuition for game elements but therefore no knowledge in the areas of development. dioJSONes defines a set of naming conventions and special keywords which will be interpretet at the parsing of JSONs for special uses. i.e: * Constructors to instanciate Entities * Inheritance of other JSON-files * Systematic structure of data","title":"Introduction"},{"location":"Cogsmos/descARtes/#convention","text":"Needed Keys * Each object needs a type-key which defines how DioJSONes will parse and interpret data into the game. see the list of types for reference. * Each object needs an id-key to make them retraceable. more info to its syntax is further down. { \"type\": \"skill\", \"name\": \"acrobatics\", \"ID\": \"acrobatics_skill\" } common keys meaning ID unique String to Identify data Name one worded description for reference Description Text which will be shown to player for more information Template For comfort and to minimice parsing errors,every type of JSON-files has in its folder a Template. make sure to copy it into a new Textfile and customice the placeholder to your actual content. Units | Abbrevation | meaning | |--|--| | | | Comments To add a explanation of an Entry,type a new one above itself with the key \"//\" with the number of comment and your explanation as value. { \"//1\": \"this is a comment to give an example of the syntax\" } Key-Naming the usual conevntion for porgrammers is to \"separate\" variables by camelCase (i.e \"theQuickBrownFoxJumpsOverTheLazyDog\"). but it may take some time to get used to it.So for comfort,Contentdesigner can use snake_case, i.e: { \"syntax\":\"the_quick_brown_fox_jumps_over_the_lazy_dog\" } note : every word is written in lower case and the underscore happens at the front of the second word. explanation : a underscore symbolices something is not overaching but closely relatet to the word before it ID-Naming like state,ID are very important,and even more is a static and reliable naming of them. an ID starts with its grouping,groupings are sequentiall names of subfolders,separated with an take away(-) in example: the data of upper_leg.json in \"Config/Anatomy/metahuman/\" { \"grouping_example\":\"A-Metahuman-\" } note : groupings are Capitaliced explanation : the take away symbolices in comparrison to the underscore a overaching thing which can have many things (in this case arms or heads) under itself. the the subfolders before the last are cut short to their first letter. after groupings,what follows is the name of the JSON-File itself. in example: the data of upper_leg.json in \"Config/Anatomy/metahuman/\" { \"whole_ID\":\"Anatomy-Metahuman-upper_leg\" }","title":"Convention"},{"location":"Cogsmos/descARtes/#constructors","text":"sometimes its usefull to have json defined thing in an other json,for example can we modify stats by","title":"Constructors"},{"location":"Cogsmos/descARtes/#types","text":"Types Description Anatomy Bodyparts of diffrent races ASCII_Art Predefined texts Chunk_Keywords Keywords for attributes of Chunk Conditions Effects on the Body by external factors >Entities_Attributes ET_Race Attributes of diffrent Races ET_Roles Attributes of diffrent Roles ET_Specialties Attributes of diffrent Specialties Factions groups of people Flags valueless Components for plausibillity-checks >Items I_Consumables one time use items >Kits >>K_Electronics >>>K_E_Cyberware K_E_C_Model Effect of Cyberware K_E_C_Integration Appliance of Cyberware K_E_C_Appendix Customiced expansion >>>K_E_Drone K_E_D_Frame basemodell of Drone K_E_D_Movement i.e propellent or wheels K_E_D_Sensor i.e Infrared sight or sonar hearing >>>K_E_Hack K_E_H_Daemon Effect of Hack K_E_H_Target i.e data, persona or device K_E_H_Appendix Customiced expansion >>K_Magic >>>K_M_Infusion K_M_I_Power Effect of Infusion K_M_I_Bodypart Anatomical placement K_M_I_Appendix Customiced expansion >>>K_M_Spell K_M_S_Formular Effect of Spell K_M_S_Medium movement of map i.e instant or area K_M_S_Appendix Customiced expansion >>>K_M_Conjuration K_M_C_Force Effect of Cyberware K_M_C_Behavior priority i.e healing K_M_C_Appendix Customiced expansion >>K_Universal >>>K_U_Armor K_U_A_Coating protection of external factors K_U_A_Matterial protection of damage K_U_A_Appendix Customiced expansion >>>K_U_Gun K_U_G_Frame basemodell of Gun K_U_A_Sight effective range K_U_A_Ammunation damagetype >>>K_U_Meele K_U_M_Hitzone i.e blunt or sharp or punctual K_U_A_Shaft i.e handguard K_U_A_Appendix Customiced expansion >Loot_Tables LT_Object probabillity of items i.e crates or save LT_Entities probabillity of items i.e corpses Statistics Stats of last Playthrough >Meta >>M_Archivements Milestones which player has reached in a game once","title":"Types"},{"location":"Cogsmos/dioJSONes/","text":"dioJSONes Convention Types Constructors Introduction dioJSONes is my attempt of a compromise between Developer and Contentdesigner. while developers have the necessary knowledge of Programming language and experience to implement functions of features, they therefore have a lack of time to use this to implement instances of features in a game. Contentdesigners have creative ideas and intuition for game elements but therefore no knowledge in the areas of development. dioJSONes defines a set of naming conventions and special keywords which will be interpretet at the parsing of JSONs for special uses. i.e: * Constructors to instanciate Entities * Inheritance of other JSON-files * Systematic structure of data Convention Needed Keys * Each object needs a type-key which defines how DioJSONes will parse and interpret data into the game. see the list of types for reference. * Each object needs an id-key to make them retraceable. more info to its syntax is further down. { \"type\": \"skill\", \"name\": \"acrobatics\", \"ID\": \"acrobatics_skill\" } common keys meaning ID unique String to Identify data Name one worded description for reference Description Text which will be shown to player for more information Template For comfort and to minimice parsing errors,every type of JSON-files has in its folder a Template. make sure to copy it into a new Textfile and customice the placeholder to your actual content. Units | Abbrevation | meaning | |--|--| | | | Comments To add a explanation of an Entry,type a new one above itself with the key \"//\" with the number of comment and your explanation as value. { \"//1\": \"this is a comment to give an example of the syntax\" } Key-Naming the usual conevntion for porgrammers is to \"separate\" variables by camelCase (i.e \"theQuickBrownFoxJumpsOverTheLazyDog\"). but it may take some time to get used to it.So for comfort,Contentdesigner can use snake_case, i.e: { \"syntax\":\"the_quick_brown_fox_jumps_over_the_lazy_dog\" } note : every word is written in lower case and the underscore happens at the front of the second word. explanation : a underscore symbolices something is not overaching but closely relatet to the word before it ID-Naming like state,ID are very important,and even more is a static and reliable naming of them. an ID starts with its grouping,groupings are sequentiall names of subfolders,separated with an take away(-) in example: the data of upper_leg.json in \"Config/Anatomy/metahuman/\" { \"grouping_example\":\"A-Metahuman-\" } note : groupings are Capitaliced explanation : the take away symbolices in comparrison to the underscore a overaching thing which can have many things (in this case arms or heads) under itself. the the subfolders before the last are cut short to their first letter. after groupings,what follows is the name of the JSON-File itself. in example: the data of upper_leg.json in \"Config/Anatomy/metahuman/\" { \"whole_ID\":\"Anatomy-Metahuman-upper_leg\" } Constructors sometimes its usefull to have json defined thing in an other json,for example can we modify stats by Types Types Description Anatomy Bodyparts of diffrent races ASCII_Art Predefined texts Chunk_Keywords Keywords for attributes of Chunk Conditions Effects on the Body by external factors >Entities_Attributes ET_Race Attributes of diffrent Races ET_Roles Attributes of diffrent Roles ET_Specialties Attributes of diffrent Specialties Factions groups of people Flags valueless Components for plausibillity-checks >Items I_Consumables one time use items >Kits >>K_Electronics >>>K_E_Cyberware K_E_C_Model Effect of Cyberware K_E_C_Integration Appliance of Cyberware K_E_C_Appendix Customiced expansion >>>K_E_Drone K_E_D_Frame basemodell of Drone K_E_D_Movement i.e propellent or wheels K_E_D_Sensor i.e Infrared sight or sonar hearing >>>K_E_Hack K_E_H_Daemon Effect of Hack K_E_H_Target i.e data, persona or device K_E_H_Appendix Customiced expansion >>K_Magic >>>K_M_Infusion K_M_I_Power Effect of Infusion K_M_I_Bodypart Anatomical placement K_M_I_Appendix Customiced expansion >>>K_M_Spell K_M_S_Formular Effect of Spell K_M_S_Medium movement of map i.e instant or area K_M_S_Appendix Customiced expansion >>>K_M_Conjuration K_M_C_Force Effect of Cyberware K_M_C_Behavior priority i.e healing K_M_C_Appendix Customiced expansion >>K_Universal >>>K_U_Armor K_U_A_Coating protection of external factors K_U_A_Matterial protection of damage K_U_A_Appendix Customiced expansion >>>K_U_Gun K_U_G_Frame basemodell of Gun K_U_A_Sight effective range K_U_A_Ammunation damagetype >>>K_U_Meele K_U_M_Hitzone i.e blunt or sharp or punctual K_U_A_Shaft i.e handguard K_U_A_Appendix Customiced expansion >Loot_Tables LT_Object probabillity of items i.e crates or save LT_Entities probabillity of items i.e corpses Statistics Stats of last Playthrough >Meta >>M_Archivements Milestones which player has reached in a game once","title":"dioJSONes"},{"location":"Cogsmos/dioJSONes/#diojsones","text":"Convention Types Constructors","title":"dioJSONes"},{"location":"Cogsmos/dioJSONes/#introduction","text":"dioJSONes is my attempt of a compromise between Developer and Contentdesigner. while developers have the necessary knowledge of Programming language and experience to implement functions of features, they therefore have a lack of time to use this to implement instances of features in a game. Contentdesigners have creative ideas and intuition for game elements but therefore no knowledge in the areas of development. dioJSONes defines a set of naming conventions and special keywords which will be interpretet at the parsing of JSONs for special uses. i.e: * Constructors to instanciate Entities * Inheritance of other JSON-files * Systematic structure of data","title":"Introduction"},{"location":"Cogsmos/dioJSONes/#convention","text":"Needed Keys * Each object needs a type-key which defines how DioJSONes will parse and interpret data into the game. see the list of types for reference. * Each object needs an id-key to make them retraceable. more info to its syntax is further down. { \"type\": \"skill\", \"name\": \"acrobatics\", \"ID\": \"acrobatics_skill\" } common keys meaning ID unique String to Identify data Name one worded description for reference Description Text which will be shown to player for more information Template For comfort and to minimice parsing errors,every type of JSON-files has in its folder a Template. make sure to copy it into a new Textfile and customice the placeholder to your actual content. Units | Abbrevation | meaning | |--|--| | | | Comments To add a explanation of an Entry,type a new one above itself with the key \"//\" with the number of comment and your explanation as value. { \"//1\": \"this is a comment to give an example of the syntax\" } Key-Naming the usual conevntion for porgrammers is to \"separate\" variables by camelCase (i.e \"theQuickBrownFoxJumpsOverTheLazyDog\"). but it may take some time to get used to it.So for comfort,Contentdesigner can use snake_case, i.e: { \"syntax\":\"the_quick_brown_fox_jumps_over_the_lazy_dog\" } note : every word is written in lower case and the underscore happens at the front of the second word. explanation : a underscore symbolices something is not overaching but closely relatet to the word before it ID-Naming like state,ID are very important,and even more is a static and reliable naming of them. an ID starts with its grouping,groupings are sequentiall names of subfolders,separated with an take away(-) in example: the data of upper_leg.json in \"Config/Anatomy/metahuman/\" { \"grouping_example\":\"A-Metahuman-\" } note : groupings are Capitaliced explanation : the take away symbolices in comparrison to the underscore a overaching thing which can have many things (in this case arms or heads) under itself. the the subfolders before the last are cut short to their first letter. after groupings,what follows is the name of the JSON-File itself. in example: the data of upper_leg.json in \"Config/Anatomy/metahuman/\" { \"whole_ID\":\"Anatomy-Metahuman-upper_leg\" }","title":"Convention"},{"location":"Cogsmos/dioJSONes/#constructors","text":"sometimes its usefull to have json defined thing in an other json,for example can we modify stats by","title":"Constructors"},{"location":"Cogsmos/dioJSONes/#types","text":"Types Description Anatomy Bodyparts of diffrent races ASCII_Art Predefined texts Chunk_Keywords Keywords for attributes of Chunk Conditions Effects on the Body by external factors >Entities_Attributes ET_Race Attributes of diffrent Races ET_Roles Attributes of diffrent Roles ET_Specialties Attributes of diffrent Specialties Factions groups of people Flags valueless Components for plausibillity-checks >Items I_Consumables one time use items >Kits >>K_Electronics >>>K_E_Cyberware K_E_C_Model Effect of Cyberware K_E_C_Integration Appliance of Cyberware K_E_C_Appendix Customiced expansion >>>K_E_Drone K_E_D_Frame basemodell of Drone K_E_D_Movement i.e propellent or wheels K_E_D_Sensor i.e Infrared sight or sonar hearing >>>K_E_Hack K_E_H_Daemon Effect of Hack K_E_H_Target i.e data, persona or device K_E_H_Appendix Customiced expansion >>K_Magic >>>K_M_Infusion K_M_I_Power Effect of Infusion K_M_I_Bodypart Anatomical placement K_M_I_Appendix Customiced expansion >>>K_M_Spell K_M_S_Formular Effect of Spell K_M_S_Medium movement of map i.e instant or area K_M_S_Appendix Customiced expansion >>>K_M_Conjuration K_M_C_Force Effect of Cyberware K_M_C_Behavior priority i.e healing K_M_C_Appendix Customiced expansion >>K_Universal >>>K_U_Armor K_U_A_Coating protection of external factors K_U_A_Matterial protection of damage K_U_A_Appendix Customiced expansion >>>K_U_Gun K_U_G_Frame basemodell of Gun K_U_A_Sight effective range K_U_A_Ammunation damagetype >>>K_U_Meele K_U_M_Hitzone i.e blunt or sharp or punctual K_U_A_Shaft i.e handguard K_U_A_Appendix Customiced expansion >Loot_Tables LT_Object probabillity of items i.e crates or save LT_Entities probabillity of items i.e corpses Statistics Stats of last Playthrough >Meta >>M_Archivements Milestones which player has reached in a game once","title":"Types"},{"location":"Cogsmos/heGEL/","text":"Applying Conditions Tiles are espacially prone to Entropy, their whole purpose is to expand Effects under certain conditions. This is managed by following Components: Component-name triggers validation by... Reference C_63_APPLY_CONDITION_SPREADING Conditions with Spreading Symbiotic WIP C_64_APPLY_CONDITION_WALKING Actors getting on its position, no matter its layer Class: SokraTiles_Chunk_Actors Function: attachCondIfPossible()","title":"heGEL"},{"location":"Cogsmos/heGEL/#applying-conditions","text":"Tiles are espacially prone to Entropy, their whole purpose is to expand Effects under certain conditions. This is managed by following Components: Component-name triggers validation by... Reference C_63_APPLY_CONDITION_SPREADING Conditions with Spreading Symbiotic WIP C_64_APPLY_CONDITION_WALKING Actors getting on its position, no matter its layer Class: SokraTiles_Chunk_Actors Function: attachCondIfPossible()","title":"Applying Conditions"},{"location":"Cogsmos/kANt/","text":"dioJSONes Convention Types Constructors Introduction dioJSONes is my attempt of a compromise between Developer and Contentdesigner. while developers have the necessary knowledge of Programming language and experience to implement functions of features, they therefore have a lack of time to use this to implement instances of features in a game. Contentdesigners have creative ideas and intuition for game elements but therefore no knowledge in the areas of development. dioJSONes defines a set of naming conventions and special keywords which will be interpretet at the parsing of JSONs for special uses. i.e: * Constructors to instanciate Entities * Inheritance of other JSON-files * Systematic structure of data Convention Needed Keys * Each object needs a type-key which defines how DioJSONes will parse and interpret data into the game. see the list of types for reference. * Each object needs an id-key to make them retraceable. more info to its syntax is further down. { \"type\": \"skill\", \"name\": \"acrobatics\", \"ID\": \"acrobatics_skill\" } common keys meaning ID unique String to Identify data Name one worded description for reference Description Text which will be shown to player for more information Template For comfort and to minimice parsing errors,every type of JSON-files has in its folder a Template. make sure to copy it into a new Textfile and customice the placeholder to your actual content. Units | Abbrevation | meaning | |--|--| | | | Comments To add a explanation of an Entry,type a new one above itself with the key \"//\" with the number of comment and your explanation as value. { \"//1\": \"this is a comment to give an example of the syntax\" } Key-Naming the usual conevntion for porgrammers is to \"separate\" variables by camelCase (i.e \"theQuickBrownFoxJumpsOverTheLazyDog\"). but it may take some time to get used to it.So for comfort,Contentdesigner can use snake_case, i.e: { \"syntax\":\"the_quick_brown_fox_jumps_over_the_lazy_dog\" } note : every word is written in lower case and the underscore happens at the front of the second word. explanation : a underscore symbolices something is not overaching but closely relatet to the word before it ID-Naming like state,ID are very important,and even more is a static and reliable naming of them. an ID starts with its grouping,groupings are sequentiall names of subfolders,separated with an take away(-) in example: the data of upper_leg.json in \"Config/Anatomy/metahuman/\" { \"grouping_example\":\"A-Metahuman-\" } note : groupings are Capitaliced explanation : the take away symbolices in comparrison to the underscore a overaching thing which can have many things (in this case arms or heads) under itself. the the subfolders before the last are cut short to their first letter. after groupings,what follows is the name of the JSON-File itself. in example: the data of upper_leg.json in \"Config/Anatomy/metahuman/\" { \"whole_ID\":\"Anatomy-Metahuman-upper_leg\" } Constructors sometimes its usefull to have json defined thing in an other json,for example can we modify stats by Types Types Description Anatomy Bodyparts of diffrent races ASCII_Art Predefined texts Chunk_Keywords Keywords for attributes of Chunk Conditions Effects on the Body by external factors >Entities_Attributes ET_Race Attributes of diffrent Races ET_Roles Attributes of diffrent Roles ET_Specialties Attributes of diffrent Specialties Factions groups of people Flags valueless Components for plausibillity-checks >Items I_Consumables one time use items >Kits >>K_Electronics >>>K_E_Cyberware K_E_C_Model Effect of Cyberware K_E_C_Integration Appliance of Cyberware K_E_C_Appendix Customiced expansion >>>K_E_Drone K_E_D_Frame basemodell of Drone K_E_D_Movement i.e propellent or wheels K_E_D_Sensor i.e Infrared sight or sonar hearing >>>K_E_Hack K_E_H_Daemon Effect of Hack K_E_H_Target i.e data, persona or device K_E_H_Appendix Customiced expansion >>K_Magic >>>K_M_Infusion K_M_I_Power Effect of Infusion K_M_I_Bodypart Anatomical placement K_M_I_Appendix Customiced expansion >>>K_M_Spell K_M_S_Formular Effect of Spell K_M_S_Medium movement of map i.e instant or area K_M_S_Appendix Customiced expansion >>>K_M_Conjuration K_M_C_Force Effect of Cyberware K_M_C_Behavior priority i.e healing K_M_C_Appendix Customiced expansion >>K_Universal >>>K_U_Armor K_U_A_Coating protection of external factors K_U_A_Matterial protection of damage K_U_A_Appendix Customiced expansion >>>K_U_Gun K_U_G_Frame basemodell of Gun K_U_A_Sight effective range K_U_A_Ammunation damagetype >>>K_U_Meele K_U_M_Hitzone i.e blunt or sharp or punctual K_U_A_Shaft i.e handguard K_U_A_Appendix Customiced expansion >Loot_Tables LT_Object probabillity of items i.e crates or save LT_Entities probabillity of items i.e corpses Statistics Stats of last Playthrough >Meta >>M_Archivements Milestones which player has reached in a game once","title":"kANt"},{"location":"Cogsmos/kANt/#diojsones","text":"Convention Types Constructors","title":"dioJSONes"},{"location":"Cogsmos/kANt/#introduction","text":"dioJSONes is my attempt of a compromise between Developer and Contentdesigner. while developers have the necessary knowledge of Programming language and experience to implement functions of features, they therefore have a lack of time to use this to implement instances of features in a game. Contentdesigners have creative ideas and intuition for game elements but therefore no knowledge in the areas of development. dioJSONes defines a set of naming conventions and special keywords which will be interpretet at the parsing of JSONs for special uses. i.e: * Constructors to instanciate Entities * Inheritance of other JSON-files * Systematic structure of data","title":"Introduction"},{"location":"Cogsmos/kANt/#convention","text":"Needed Keys * Each object needs a type-key which defines how DioJSONes will parse and interpret data into the game. see the list of types for reference. * Each object needs an id-key to make them retraceable. more info to its syntax is further down. { \"type\": \"skill\", \"name\": \"acrobatics\", \"ID\": \"acrobatics_skill\" } common keys meaning ID unique String to Identify data Name one worded description for reference Description Text which will be shown to player for more information Template For comfort and to minimice parsing errors,every type of JSON-files has in its folder a Template. make sure to copy it into a new Textfile and customice the placeholder to your actual content. Units | Abbrevation | meaning | |--|--| | | | Comments To add a explanation of an Entry,type a new one above itself with the key \"//\" with the number of comment and your explanation as value. { \"//1\": \"this is a comment to give an example of the syntax\" } Key-Naming the usual conevntion for porgrammers is to \"separate\" variables by camelCase (i.e \"theQuickBrownFoxJumpsOverTheLazyDog\"). but it may take some time to get used to it.So for comfort,Contentdesigner can use snake_case, i.e: { \"syntax\":\"the_quick_brown_fox_jumps_over_the_lazy_dog\" } note : every word is written in lower case and the underscore happens at the front of the second word. explanation : a underscore symbolices something is not overaching but closely relatet to the word before it ID-Naming like state,ID are very important,and even more is a static and reliable naming of them. an ID starts with its grouping,groupings are sequentiall names of subfolders,separated with an take away(-) in example: the data of upper_leg.json in \"Config/Anatomy/metahuman/\" { \"grouping_example\":\"A-Metahuman-\" } note : groupings are Capitaliced explanation : the take away symbolices in comparrison to the underscore a overaching thing which can have many things (in this case arms or heads) under itself. the the subfolders before the last are cut short to their first letter. after groupings,what follows is the name of the JSON-File itself. in example: the data of upper_leg.json in \"Config/Anatomy/metahuman/\" { \"whole_ID\":\"Anatomy-Metahuman-upper_leg\" }","title":"Convention"},{"location":"Cogsmos/kANt/#constructors","text":"sometimes its usefull to have json defined thing in an other json,for example can we modify stats by","title":"Constructors"},{"location":"Cogsmos/kANt/#types","text":"Types Description Anatomy Bodyparts of diffrent races ASCII_Art Predefined texts Chunk_Keywords Keywords for attributes of Chunk Conditions Effects on the Body by external factors >Entities_Attributes ET_Race Attributes of diffrent Races ET_Roles Attributes of diffrent Roles ET_Specialties Attributes of diffrent Specialties Factions groups of people Flags valueless Components for plausibillity-checks >Items I_Consumables one time use items >Kits >>K_Electronics >>>K_E_Cyberware K_E_C_Model Effect of Cyberware K_E_C_Integration Appliance of Cyberware K_E_C_Appendix Customiced expansion >>>K_E_Drone K_E_D_Frame basemodell of Drone K_E_D_Movement i.e propellent or wheels K_E_D_Sensor i.e Infrared sight or sonar hearing >>>K_E_Hack K_E_H_Daemon Effect of Hack K_E_H_Target i.e data, persona or device K_E_H_Appendix Customiced expansion >>K_Magic >>>K_M_Infusion K_M_I_Power Effect of Infusion K_M_I_Bodypart Anatomical placement K_M_I_Appendix Customiced expansion >>>K_M_Spell K_M_S_Formular Effect of Spell K_M_S_Medium movement of map i.e instant or area K_M_S_Appendix Customiced expansion >>>K_M_Conjuration K_M_C_Force Effect of Cyberware K_M_C_Behavior priority i.e healing K_M_C_Appendix Customiced expansion >>K_Universal >>>K_U_Armor K_U_A_Coating protection of external factors K_U_A_Matterial protection of damage K_U_A_Appendix Customiced expansion >>>K_U_Gun K_U_G_Frame basemodell of Gun K_U_A_Sight effective range K_U_A_Ammunation damagetype >>>K_U_Meele K_U_M_Hitzone i.e blunt or sharp or punctual K_U_A_Shaft i.e handguard K_U_A_Appendix Customiced expansion >Loot_Tables LT_Object probabillity of items i.e crates or save LT_Entities probabillity of items i.e corpses Statistics Stats of last Playthrough >Meta >>M_Archivements Milestones which player has reached in a game once","title":"Types"},{"location":"Cogsmos/mARx/","text":"dioJSONes Convention Types Constructors Introduction dioJSONes is my attempt of a compromise between Developer and Contentdesigner. while developers have the necessary knowledge of Programming language and experience to implement functions of features, they therefore have a lack of time to use this to implement instances of features in a game. Contentdesigners have creative ideas and intuition for game elements but therefore no knowledge in the areas of development. dioJSONes defines a set of naming conventions and special keywords which will be interpretet at the parsing of JSONs for special uses. i.e: * Constructors to instanciate Entities * Inheritance of other JSON-files * Systematic structure of data Convention Needed Keys * Each object needs a type-key which defines how DioJSONes will parse and interpret data into the game. see the list of types for reference. * Each object needs an id-key to make them retraceable. more info to its syntax is further down. { \"type\": \"skill\", \"name\": \"acrobatics\", \"ID\": \"acrobatics_skill\" } common keys meaning ID unique String to Identify data Name one worded description for reference Description Text which will be shown to player for more information Template For comfort and to minimice parsing errors,every type of JSON-files has in its folder a Template. make sure to copy it into a new Textfile and customice the placeholder to your actual content. Units | Abbrevation | meaning | |--|--| | | | Comments To add a explanation of an Entry,type a new one above itself with the key \"//\" with the number of comment and your explanation as value. { \"//1\": \"this is a comment to give an example of the syntax\" } Key-Naming the usual conevntion for porgrammers is to \"separate\" variables by camelCase (i.e \"theQuickBrownFoxJumpsOverTheLazyDog\"). but it may take some time to get used to it.So for comfort,Contentdesigner can use snake_case, i.e: { \"syntax\":\"the_quick_brown_fox_jumps_over_the_lazy_dog\" } note : every word is written in lower case and the underscore happens at the front of the second word. explanation : a underscore symbolices something is not overaching but closely relatet to the word before it ID-Naming like state,ID are very important,and even more is a static and reliable naming of them. an ID starts with its grouping,groupings are sequentiall names of subfolders,separated with an take away(-) in example: the data of upper_leg.json in \"Config/Anatomy/metahuman/\" { \"grouping_example\":\"A-Metahuman-\" } note : groupings are Capitaliced explanation : the take away symbolices in comparrison to the underscore a overaching thing which can have many things (in this case arms or heads) under itself. the the subfolders before the last are cut short to their first letter. after groupings,what follows is the name of the JSON-File itself. in example: the data of upper_leg.json in \"Config/Anatomy/metahuman/\" { \"whole_ID\":\"Anatomy-Metahuman-upper_leg\" } Constructors sometimes its usefull to have json defined thing in an other json,for example can we modify stats by Types Types Description Anatomy Bodyparts of diffrent races ASCII_Art Predefined texts Chunk_Keywords Keywords for attributes of Chunk Conditions Effects on the Body by external factors >Entities_Attributes ET_Race Attributes of diffrent Races ET_Roles Attributes of diffrent Roles ET_Specialties Attributes of diffrent Specialties Factions groups of people Flags valueless Components for plausibillity-checks >Items I_Consumables one time use items >Kits >>K_Electronics >>>K_E_Cyberware K_E_C_Model Effect of Cyberware K_E_C_Integration Appliance of Cyberware K_E_C_Appendix Customiced expansion >>>K_E_Drone K_E_D_Frame basemodell of Drone K_E_D_Movement i.e propellent or wheels K_E_D_Sensor i.e Infrared sight or sonar hearing >>>K_E_Hack K_E_H_Daemon Effect of Hack K_E_H_Target i.e data, persona or device K_E_H_Appendix Customiced expansion >>K_Magic >>>K_M_Infusion K_M_I_Power Effect of Infusion K_M_I_Bodypart Anatomical placement K_M_I_Appendix Customiced expansion >>>K_M_Spell K_M_S_Formular Effect of Spell K_M_S_Medium movement of map i.e instant or area K_M_S_Appendix Customiced expansion >>>K_M_Conjuration K_M_C_Force Effect of Cyberware K_M_C_Behavior priority i.e healing K_M_C_Appendix Customiced expansion >>K_Universal >>>K_U_Armor K_U_A_Coating protection of external factors K_U_A_Matterial protection of damage K_U_A_Appendix Customiced expansion >>>K_U_Gun K_U_G_Frame basemodell of Gun K_U_A_Sight effective range K_U_A_Ammunation damagetype >>>K_U_Meele K_U_M_Hitzone i.e blunt or sharp or punctual K_U_A_Shaft i.e handguard K_U_A_Appendix Customiced expansion >Loot_Tables LT_Object probabillity of items i.e crates or save LT_Entities probabillity of items i.e corpses Statistics Stats of last Playthrough >Meta >>M_Archivements Milestones which player has reached in a game once","title":"mARx"},{"location":"Cogsmos/mARx/#diojsones","text":"Convention Types Constructors","title":"dioJSONes"},{"location":"Cogsmos/mARx/#introduction","text":"dioJSONes is my attempt of a compromise between Developer and Contentdesigner. while developers have the necessary knowledge of Programming language and experience to implement functions of features, they therefore have a lack of time to use this to implement instances of features in a game. Contentdesigners have creative ideas and intuition for game elements but therefore no knowledge in the areas of development. dioJSONes defines a set of naming conventions and special keywords which will be interpretet at the parsing of JSONs for special uses. i.e: * Constructors to instanciate Entities * Inheritance of other JSON-files * Systematic structure of data","title":"Introduction"},{"location":"Cogsmos/mARx/#convention","text":"Needed Keys * Each object needs a type-key which defines how DioJSONes will parse and interpret data into the game. see the list of types for reference. * Each object needs an id-key to make them retraceable. more info to its syntax is further down. { \"type\": \"skill\", \"name\": \"acrobatics\", \"ID\": \"acrobatics_skill\" } common keys meaning ID unique String to Identify data Name one worded description for reference Description Text which will be shown to player for more information Template For comfort and to minimice parsing errors,every type of JSON-files has in its folder a Template. make sure to copy it into a new Textfile and customice the placeholder to your actual content. Units | Abbrevation | meaning | |--|--| | | | Comments To add a explanation of an Entry,type a new one above itself with the key \"//\" with the number of comment and your explanation as value. { \"//1\": \"this is a comment to give an example of the syntax\" } Key-Naming the usual conevntion for porgrammers is to \"separate\" variables by camelCase (i.e \"theQuickBrownFoxJumpsOverTheLazyDog\"). but it may take some time to get used to it.So for comfort,Contentdesigner can use snake_case, i.e: { \"syntax\":\"the_quick_brown_fox_jumps_over_the_lazy_dog\" } note : every word is written in lower case and the underscore happens at the front of the second word. explanation : a underscore symbolices something is not overaching but closely relatet to the word before it ID-Naming like state,ID are very important,and even more is a static and reliable naming of them. an ID starts with its grouping,groupings are sequentiall names of subfolders,separated with an take away(-) in example: the data of upper_leg.json in \"Config/Anatomy/metahuman/\" { \"grouping_example\":\"A-Metahuman-\" } note : groupings are Capitaliced explanation : the take away symbolices in comparrison to the underscore a overaching thing which can have many things (in this case arms or heads) under itself. the the subfolders before the last are cut short to their first letter. after groupings,what follows is the name of the JSON-File itself. in example: the data of upper_leg.json in \"Config/Anatomy/metahuman/\" { \"whole_ID\":\"Anatomy-Metahuman-upper_leg\" }","title":"Convention"},{"location":"Cogsmos/mARx/#constructors","text":"sometimes its usefull to have json defined thing in an other json,for example can we modify stats by","title":"Constructors"},{"location":"Cogsmos/mARx/#types","text":"Types Description Anatomy Bodyparts of diffrent races ASCII_Art Predefined texts Chunk_Keywords Keywords for attributes of Chunk Conditions Effects on the Body by external factors >Entities_Attributes ET_Race Attributes of diffrent Races ET_Roles Attributes of diffrent Roles ET_Specialties Attributes of diffrent Specialties Factions groups of people Flags valueless Components for plausibillity-checks >Items I_Consumables one time use items >Kits >>K_Electronics >>>K_E_Cyberware K_E_C_Model Effect of Cyberware K_E_C_Integration Appliance of Cyberware K_E_C_Appendix Customiced expansion >>>K_E_Drone K_E_D_Frame basemodell of Drone K_E_D_Movement i.e propellent or wheels K_E_D_Sensor i.e Infrared sight or sonar hearing >>>K_E_Hack K_E_H_Daemon Effect of Hack K_E_H_Target i.e data, persona or device K_E_H_Appendix Customiced expansion >>K_Magic >>>K_M_Infusion K_M_I_Power Effect of Infusion K_M_I_Bodypart Anatomical placement K_M_I_Appendix Customiced expansion >>>K_M_Spell K_M_S_Formular Effect of Spell K_M_S_Medium movement of map i.e instant or area K_M_S_Appendix Customiced expansion >>>K_M_Conjuration K_M_C_Force Effect of Cyberware K_M_C_Behavior priority i.e healing K_M_C_Appendix Customiced expansion >>K_Universal >>>K_U_Armor K_U_A_Coating protection of external factors K_U_A_Matterial protection of damage K_U_A_Appendix Customiced expansion >>>K_U_Gun K_U_G_Frame basemodell of Gun K_U_A_Sight effective range K_U_A_Ammunation damagetype >>>K_U_Meele K_U_M_Hitzone i.e blunt or sharp or punctual K_U_A_Shaft i.e handguard K_U_A_Appendix Customiced expansion >Loot_Tables LT_Object probabillity of items i.e crates or save LT_Entities probabillity of items i.e corpses Statistics Stats of last Playthrough >Meta >>M_Archivements Milestones which player has reached in a game once","title":"Types"},{"location":"Cogsmos/sokraTILES/","text":"dioJSONes Convention Types Constructors Introduction dioJSONes is my attempt of a compromise between Developer and Contentdesigner. while developers have the necessary knowledge of Programming language and experience to implement functions of features, they therefore have a lack of time to use this to implement instances of features in a game. Contentdesigners have creative ideas and intuition for game elements but therefore no knowledge in the areas of development. dioJSONes defines a set of naming conventions and special keywords which will be interpretet at the parsing of JSONs for special uses. i.e: * Constructors to instanciate Entities * Inheritance of other JSON-files * Systematic structure of data Convention Needed Keys * Each object needs a type-key which defines how DioJSONes will parse and interpret data into the game. see the list of types for reference. * Each object needs an id-key to make them retraceable. more info to its syntax is further down. { \"type\": \"skill\", \"name\": \"acrobatics\", \"ID\": \"acrobatics_skill\" } common keys meaning ID unique String to Identify data Name one worded description for reference Description Text which will be shown to player for more information Template For comfort and to minimice parsing errors,every type of JSON-files has in its folder a Template. make sure to copy it into a new Textfile and customice the placeholder to your actual content. Units | Abbrevation | meaning | |--|--| | | | Comments To add a explanation of an Entry,type a new one above itself with the key \"//\" with the number of comment and your explanation as value. { \"//1\": \"this is a comment to give an example of the syntax\" } Key-Naming the usual conevntion for porgrammers is to \"separate\" variables by camelCase (i.e \"theQuickBrownFoxJumpsOverTheLazyDog\"). but it may take some time to get used to it.So for comfort,Contentdesigner can use snake_case, i.e: { \"syntax\":\"the_quick_brown_fox_jumps_over_the_lazy_dog\" } note : every word is written in lower case and the underscore happens at the front of the second word. explanation : a underscore symbolices something is not overaching but closely relatet to the word before it ID-Naming like state,ID are very important,and even more is a static and reliable naming of them. an ID starts with its grouping,groupings are sequentiall names of subfolders,separated with an take away(-) in example: the data of upper_leg.json in \"Config/Anatomy/metahuman/\" { \"grouping_example\":\"A-Metahuman-\" } note : groupings are Capitaliced explanation : the take away symbolices in comparrison to the underscore a overaching thing which can have many things (in this case arms or heads) under itself. the the subfolders before the last are cut short to their first letter. after groupings,what follows is the name of the JSON-File itself. in example: the data of upper_leg.json in \"Config/Anatomy/metahuman/\" { \"whole_ID\":\"Anatomy-Metahuman-upper_leg\" } Constructors sometimes its usefull to have json defined thing in an other json,for example can we modify stats by Types Types Description Anatomy Bodyparts of diffrent races ASCII_Art Predefined texts Chunk_Keywords Keywords for attributes of Chunk Conditions Effects on the Body by external factors >Entities_Attributes ET_Race Attributes of diffrent Races ET_Roles Attributes of diffrent Roles ET_Specialties Attributes of diffrent Specialties Factions groups of people Flags valueless Components for plausibillity-checks >Items I_Consumables one time use items >Kits >>K_Electronics >>>K_E_Cyberware K_E_C_Model Effect of Cyberware K_E_C_Integration Appliance of Cyberware K_E_C_Appendix Customiced expansion >>>K_E_Drone K_E_D_Frame basemodell of Drone K_E_D_Movement i.e propellent or wheels K_E_D_Sensor i.e Infrared sight or sonar hearing >>>K_E_Hack K_E_H_Daemon Effect of Hack K_E_H_Target i.e data, persona or device K_E_H_Appendix Customiced expansion >>K_Magic >>>K_M_Infusion K_M_I_Power Effect of Infusion K_M_I_Bodypart Anatomical placement K_M_I_Appendix Customiced expansion >>>K_M_Spell K_M_S_Formular Effect of Spell K_M_S_Medium movement of map i.e instant or area K_M_S_Appendix Customiced expansion >>>K_M_Conjuration K_M_C_Force Effect of Cyberware K_M_C_Behavior priority i.e healing K_M_C_Appendix Customiced expansion >>K_Universal >>>K_U_Armor K_U_A_Coating protection of external factors K_U_A_Matterial protection of damage K_U_A_Appendix Customiced expansion >>>K_U_Gun K_U_G_Frame basemodell of Gun K_U_A_Sight effective range K_U_A_Ammunation damagetype >>>K_U_Meele K_U_M_Hitzone i.e blunt or sharp or punctual K_U_A_Shaft i.e handguard K_U_A_Appendix Customiced expansion >Loot_Tables LT_Object probabillity of items i.e crates or save LT_Entities probabillity of items i.e corpses Statistics Stats of last Playthrough >Meta >>M_Archivements Milestones which player has reached in a game once","title":"sokraTILES"},{"location":"Cogsmos/sokraTILES/#diojsones","text":"Convention Types Constructors","title":"dioJSONes"},{"location":"Cogsmos/sokraTILES/#introduction","text":"dioJSONes is my attempt of a compromise between Developer and Contentdesigner. while developers have the necessary knowledge of Programming language and experience to implement functions of features, they therefore have a lack of time to use this to implement instances of features in a game. Contentdesigners have creative ideas and intuition for game elements but therefore no knowledge in the areas of development. dioJSONes defines a set of naming conventions and special keywords which will be interpretet at the parsing of JSONs for special uses. i.e: * Constructors to instanciate Entities * Inheritance of other JSON-files * Systematic structure of data","title":"Introduction"},{"location":"Cogsmos/sokraTILES/#convention","text":"Needed Keys * Each object needs a type-key which defines how DioJSONes will parse and interpret data into the game. see the list of types for reference. * Each object needs an id-key to make them retraceable. more info to its syntax is further down. { \"type\": \"skill\", \"name\": \"acrobatics\", \"ID\": \"acrobatics_skill\" } common keys meaning ID unique String to Identify data Name one worded description for reference Description Text which will be shown to player for more information Template For comfort and to minimice parsing errors,every type of JSON-files has in its folder a Template. make sure to copy it into a new Textfile and customice the placeholder to your actual content. Units | Abbrevation | meaning | |--|--| | | | Comments To add a explanation of an Entry,type a new one above itself with the key \"//\" with the number of comment and your explanation as value. { \"//1\": \"this is a comment to give an example of the syntax\" } Key-Naming the usual conevntion for porgrammers is to \"separate\" variables by camelCase (i.e \"theQuickBrownFoxJumpsOverTheLazyDog\"). but it may take some time to get used to it.So for comfort,Contentdesigner can use snake_case, i.e: { \"syntax\":\"the_quick_brown_fox_jumps_over_the_lazy_dog\" } note : every word is written in lower case and the underscore happens at the front of the second word. explanation : a underscore symbolices something is not overaching but closely relatet to the word before it ID-Naming like state,ID are very important,and even more is a static and reliable naming of them. an ID starts with its grouping,groupings are sequentiall names of subfolders,separated with an take away(-) in example: the data of upper_leg.json in \"Config/Anatomy/metahuman/\" { \"grouping_example\":\"A-Metahuman-\" } note : groupings are Capitaliced explanation : the take away symbolices in comparrison to the underscore a overaching thing which can have many things (in this case arms or heads) under itself. the the subfolders before the last are cut short to their first letter. after groupings,what follows is the name of the JSON-File itself. in example: the data of upper_leg.json in \"Config/Anatomy/metahuman/\" { \"whole_ID\":\"Anatomy-Metahuman-upper_leg\" }","title":"Convention"},{"location":"Cogsmos/sokraTILES/#constructors","text":"sometimes its usefull to have json defined thing in an other json,for example can we modify stats by","title":"Constructors"},{"location":"Cogsmos/sokraTILES/#types","text":"Types Description Anatomy Bodyparts of diffrent races ASCII_Art Predefined texts Chunk_Keywords Keywords for attributes of Chunk Conditions Effects on the Body by external factors >Entities_Attributes ET_Race Attributes of diffrent Races ET_Roles Attributes of diffrent Roles ET_Specialties Attributes of diffrent Specialties Factions groups of people Flags valueless Components for plausibillity-checks >Items I_Consumables one time use items >Kits >>K_Electronics >>>K_E_Cyberware K_E_C_Model Effect of Cyberware K_E_C_Integration Appliance of Cyberware K_E_C_Appendix Customiced expansion >>>K_E_Drone K_E_D_Frame basemodell of Drone K_E_D_Movement i.e propellent or wheels K_E_D_Sensor i.e Infrared sight or sonar hearing >>>K_E_Hack K_E_H_Daemon Effect of Hack K_E_H_Target i.e data, persona or device K_E_H_Appendix Customiced expansion >>K_Magic >>>K_M_Infusion K_M_I_Power Effect of Infusion K_M_I_Bodypart Anatomical placement K_M_I_Appendix Customiced expansion >>>K_M_Spell K_M_S_Formular Effect of Spell K_M_S_Medium movement of map i.e instant or area K_M_S_Appendix Customiced expansion >>>K_M_Conjuration K_M_C_Force Effect of Cyberware K_M_C_Behavior priority i.e healing K_M_C_Appendix Customiced expansion >>K_Universal >>>K_U_Armor K_U_A_Coating protection of external factors K_U_A_Matterial protection of damage K_U_A_Appendix Customiced expansion >>>K_U_Gun K_U_G_Frame basemodell of Gun K_U_A_Sight effective range K_U_A_Ammunation damagetype >>>K_U_Meele K_U_M_Hitzone i.e blunt or sharp or punctual K_U_A_Shaft i.e handguard K_U_A_Appendix Customiced expansion >Loot_Tables LT_Object probabillity of items i.e crates or save LT_Entities probabillity of items i.e corpses Statistics Stats of last Playthrough >Meta >>M_Archivements Milestones which player has reached in a game once","title":"Types"},{"location":"Conventions/enum/","text":"Tiles Introduction Those Entities are detrimental for the Gameworld. Much more than simple textures are here saved, they hold all data needed to interact with its Enviroment and to react on it. Tiles are in P@tnicroom as complex as your typical NPC. Their Components are constantly under the influence of Effects and Actions. The most important Components are: Component-name Usage C_67_ANY_POSITION selecting for kits C_2_TEXTURE_ID indexing for Templates C_1_ANY_IS_WALKABLE Acessabillity for Actors universal Components The following Components are the lowest common anominator for Tiles. General function Type Usage Notation description String fluff and lore shown in onlook-action recommended length is 40 characters at max textureID String toString() of staticTilesetNR is a convention of 3 fields with \"_\" as IFS: Tileset_Row_Collumn layer Integer name of layer where its mapped convention of ENUM.SOKRATILES_LAYER. X _GROUND X for MEAT MATRIX MAGIC tileName String oneliner reference recommended length is 2 words at max staticTilesetNR Integer index number of corresponding Texture not recommended for freqeunt use. please use textureID for improved readabillity. Spacial function Type Usage Notation type ENUM identifier to differenciate from other entities convention of ENUM.TYPES_ON_MAP.TILE isWalkable BOOLEAN Determinds if Actors can stand on Tile mouseHover_quack String duck-typed proxy-function to show on Mousehover pos Vector2 position of Entity on x and y on Tilemap posX and posY can be for single getter. Are Converted from Double to Integer! Influencial function Type Usage Notation matrixNoise Integer negative modifier for sourrunding Electronics WIP magicNoise Integer negative modifier for sourrunding Magics WIP Quickreferences Keyword Description Tile Atlas All Tiles and their Attributes Texture Atlas All Tiles and their Attributes Apply Conditions Types of triggers to attach Conditions on Tiles Tilemap Layer functions to manipulate Tilemaps","title":"Tiles"},{"location":"Conventions/enum/#tiles","text":"","title":"Tiles"},{"location":"Conventions/enum/#introduction","text":"Those Entities are detrimental for the Gameworld. Much more than simple textures are here saved, they hold all data needed to interact with its Enviroment and to react on it. Tiles are in P@tnicroom as complex as your typical NPC. Their Components are constantly under the influence of Effects and Actions. The most important Components are:","title":"Introduction"},{"location":"Conventions/enum/#universal-components","text":"The following Components are the lowest common anominator for Tiles.","title":"universal Components"},{"location":"Conventions/enum/#general","text":"","title":"General"},{"location":"Conventions/enum/#spacial","text":"","title":"Spacial"},{"location":"Conventions/enum/#influencial","text":"","title":"Influencial"},{"location":"Conventions/enum/#quickreferences","text":"","title":"Quickreferences"},{"location":"Conventions/moduleStructure/","text":"Modules My Project structure follows an Systemic design pilosophy, its goal is toappend new themes of Features as an Module-folder,which acts like a Blackbox. The only Accespoint is their SIngleton API which saniticies, validates or logs if neccessary. Here are the conversioned Namespaces and their Usage: Namespace Usage Controller Folder for foreign related Classes > API proxy functions with Saniticer,Validator and/or Logger > Logger Used ingame Eventlog and Entropy counter > Validators checks in- and outputs on their right type and validity > CompIndex Dictionary of all new Comps Of Module,needed for their instancing via JSON Components Folder with all new data containers Entity Manager Folder with Classes for instanciating,freeing,changing Entities IO Folder With InputClass which connects Signals to API and OutputClass which emits System all kinds of blackbooxed Logical Computation Unit Test Classes for Unit Testing","title":"moduleStructure"},{"location":"Conventions/moduleStructure/#modules","text":"My Project structure follows an Systemic design pilosophy, its goal is toappend new themes of Features as an Module-folder,which acts like a Blackbox. The only Accespoint is their SIngleton API which saniticies, validates or logs if neccessary. Here are the conversioned Namespaces and their Usage: Namespace Usage Controller Folder for foreign related Classes > API proxy functions with Saniticer,Validator and/or Logger > Logger Used ingame Eventlog and Entropy counter > Validators checks in- and outputs on their right type and validity > CompIndex Dictionary of all new Comps Of Module,needed for their instancing via JSON Components Folder with all new data containers Entity Manager Folder with Classes for instanciating,freeing,changing Entities IO Folder With InputClass which connects Signals to API and OutputClass which emits System all kinds of blackbooxed Logical Computation Unit Test Classes for Unit Testing","title":"Modules"},{"location":"Conventions/naming/","text":"Tiles Introduction Those Entities are detrimental for the Gameworld. Much more than simple textures are here saved, they hold all data needed to interact with its Enviroment and to react on it. Tiles are in P@tnicroom as complex as your typical NPC. Their Components are constantly under the influence of Effects and Actions. The most important Components are: Component-name Usage C_67_ANY_POSITION selecting for kits C_2_TEXTURE_ID indexing for Templates C_1_ANY_IS_WALKABLE Acessabillity for Actors universal Components The following Components are the lowest common anominator for Tiles. General function Type Usage Notation description String fluff and lore shown in onlook-action recommended length is 40 characters at max textureID String toString() of staticTilesetNR is a convention of 3 fields with \"_\" as IFS: Tileset_Row_Collumn layer Integer name of layer where its mapped convention of ENUM.SOKRATILES_LAYER. X _GROUND X for MEAT MATRIX MAGIC tileName String oneliner reference recommended length is 2 words at max staticTilesetNR Integer index number of corresponding Texture not recommended for freqeunt use. please use textureID for improved readabillity. Spacial function Type Usage Notation type ENUM identifier to differenciate from other entities convention of ENUM.TYPES_ON_MAP.TILE isWalkable BOOLEAN Determinds if Actors can stand on Tile mouseHover_quack String duck-typed proxy-function to show on Mousehover pos Vector2 position of Entity on x and y on Tilemap posX and posY can be for single getter. Are Converted from Double to Integer! Influencial function Type Usage Notation matrixNoise Integer negative modifier for sourrunding Electronics WIP magicNoise Integer negative modifier for sourrunding Magics WIP Quickreferences Keyword Description Tile Atlas All Tiles and their Attributes Texture Atlas All Tiles and their Attributes Apply Conditions Types of triggers to attach Conditions on Tiles Tilemap Layer functions to manipulate Tilemaps","title":"Tiles"},{"location":"Conventions/naming/#tiles","text":"","title":"Tiles"},{"location":"Conventions/naming/#introduction","text":"Those Entities are detrimental for the Gameworld. Much more than simple textures are here saved, they hold all data needed to interact with its Enviroment and to react on it. Tiles are in P@tnicroom as complex as your typical NPC. Their Components are constantly under the influence of Effects and Actions. The most important Components are:","title":"Introduction"},{"location":"Conventions/naming/#universal-components","text":"The following Components are the lowest common anominator for Tiles.","title":"universal Components"},{"location":"Conventions/naming/#general","text":"","title":"General"},{"location":"Conventions/naming/#spacial","text":"","title":"Spacial"},{"location":"Conventions/naming/#influencial","text":"","title":"Influencial"},{"location":"Conventions/naming/#quickreferences","text":"","title":"Quickreferences"},{"location":"Conventions/styling/","text":"Styleguide General we use for variables camelCaseLikeThisForExample private variables start with an underscore to \"hide\" them in _functioncalls() we use static typing as much as possible for a declaration,we set a blankspace in front of the Datatype: var number: int for Parameters in functions,we cramp them together: func foo(add:int,print:String): for Arrays and Dictionaries,we dont type them when we set their equal: var toPrint = [] however there are times where we want to stay in dynamic Typing. We use a hybrid to to duckType, ecspecially at diffrent kinds of entites. you can guess that parameters or variables which are named like \"ent\" use a fluid Class instance. And to my pardon,you need to do this until GD-Script can declare Interfaces ( hints would be appreciated,guys I really want some Interfaces D; )","title":"Styling"},{"location":"Conventions/styling/#styleguide","text":"","title":"Styleguide"},{"location":"Conventions/styling/#general","text":"we use for variables camelCaseLikeThisForExample private variables start with an underscore to \"hide\" them in _functioncalls() we use static typing as much as possible for a declaration,we set a blankspace in front of the Datatype: var number: int for Parameters in functions,we cramp them together: func foo(add:int,print:String): for Arrays and Dictionaries,we dont type them when we set their equal: var toPrint = [] however there are times where we want to stay in dynamic Typing. We use a hybrid to to duckType, ecspecially at diffrent kinds of entites. you can guess that parameters or variables which are named like \"ent\" use a fluid Class instance. And to my pardon,you need to do this until GD-Script can declare Interfaces ( hints would be appreciated,guys I really want some Interfaces D; )","title":"General"},{"location":"Entities/actor/","text":"Actors Introduction Those Entities are the important kickstarter for Excitement. Actors are aware beings like humans, but also Animals, Critters, Ghosts or Plants. The big difference to Interactables is,Actors follow a goals, initiate events like shooting, while Interactables stay reactionary. The most important Components are: Component-name Usage hitpoints to check if still alive Procedural Generation Actors are Dynamicaly generated by selecting modules and add their set values to the total of the Entity. There are three types of Categories: Component-name Usage Races Determinds max of Attributes and their Basevalue, also comes with feats Roles Gives a large amount of Skillpoints and some for Attributes Specialties Gives Gear, some little feats and some Skillpoints universal Components The following Components are the lowest common anominator for Tiles. General function Type Usage Notation description String fluff and lore shown in onlook-action recommended length is 40 characters at max textureID String toString() of staticTilesetNR is a convention of 3 fields with \"_\" as IFS: Tileset_Row_Collumn tileName String oneliner reference recommended length is 2 words at max staticTilesetNR Integer index number of corresponding Texture not recommended for freqeunt use. please use textureID for improved readabillity. Synonym String RNG-selected lore name of Race Role Spcialty Spacial function Type Usage Notation type ENUM identifier to differenciate from other entities convention of ENUM.TYPES_ON_MAP.ACTOR isWalkable BOOLEAN Determinds if Actors can stand on Tile mouseHover_quack String duck-typed proxy-function to show on Mousehover pos Vector2 position of Entity on x and y on Tilemap posX and posY can be for single getter. Are Converted from Double to Integer! Stats function Type Usage Notation constitution Integer Health, CarriageCapacity physical reaction Integer physical strength Integer physical agillity Integer physical willpower Integer mental logic Integer mental charisma Integer mental intuition Integer mental indirect Stats function Type Usage Notation carriageCapacity Integer kg of gear actor can carry hitpoints Integer Live of Actor physicalLimit Integer max successes in Dicerole for physical mentalLimit Integer max successes in Dicerole for mental socialLimit Integer max successes in Dicerole for social Quickreferences Keyword Description Races Atlas Determinds max of Attributes and their Basevalue, also comes with feats Roles Atlas Gives a large amount of Skillpoints and some for Attributes Specialties Atlas Gives Gear, some little feats and some Skillpoints Tilemap Layer API to manipulate Tilemap","title":"Actors"},{"location":"Entities/actor/#actors","text":"","title":"Actors"},{"location":"Entities/actor/#introduction","text":"Those Entities are the important kickstarter for Excitement. Actors are aware beings like humans, but also Animals, Critters, Ghosts or Plants. The big difference to Interactables is,Actors follow a goals, initiate events like shooting, while Interactables stay reactionary. The most important Components are:","title":"Introduction"},{"location":"Entities/actor/#procedural-generation","text":"Actors are Dynamicaly generated by selecting modules and add their set values to the total of the Entity. There are three types of Categories:","title":"Procedural Generation"},{"location":"Entities/actor/#universal-components","text":"The following Components are the lowest common anominator for Tiles.","title":"universal Components"},{"location":"Entities/actor/#general","text":"","title":"General"},{"location":"Entities/actor/#spacial","text":"","title":"Spacial"},{"location":"Entities/actor/#stats","text":"","title":"Stats"},{"location":"Entities/actor/#indirect-stats","text":"","title":"indirect Stats"},{"location":"Entities/actor/#quickreferences","text":"","title":"Quickreferences"},{"location":"Entities/condition/","text":"Tiles Introduction Those Entities are detrimental for the Gameworld. Much more than simple textures are here saved, they hold all data needed to interact with its Enviroment and to react on it. Tiles are in P@tnicroom as complex as your typical NPC. Their Components are constantly under the influence of Effects and Actions. The most important Components are: Component-name Usage C_67_ANY_POSITION selecting for kits C_2_TEXTURE_ID indexing for Templates C_1_ANY_IS_WALKABLE Acessabillity for Actors universal Components The following Components are the lowest common anominator for Tiles. Spacial function Type Usage Notation type ENUM identifier to differenciate from other entities convention of ENUM.TYPES_ON_MAP.TILE isWalkable BOOLEAN Determinds if Actors can stand on Tile mouseHover_quack String duck-typed proxy-function to show on Mousehover pos Vector2 position of Entity on x and y on Tilemap posX and posY can be for single getter. Are Converted from Double to Integer! Influencial function Type Usage Notation matrixNoise Integer negative modifier for sourrunding Electronics WIP magicNoise Integer negative modifier for sourrunding Magics WIP General function Type Usage Notation description String fluff and lore shown in onlook-action recommended length is 40 characters at max textureID String toString() of staticTilesetNR is a convention of 3 fields with \"_\" as IFS: Tileset_Row_Collumn layer Integer name of layer where its mapped convention of ENUM.SOKRATILES_LAYER. X _GROUND X for MEAT MATRIX MAGIC tileName String oneliner reference recommended length is 2 words at max staticTilesetNR Integer index number of corresponding Texture not recommended for freqeunt use. please use textureID for improved readabillity. Quickreferences Keyword Description Tile Atlas All Tiles and their Attributes Texture Atlas All Tiles and their Attributes Apply Conditions Types of triggers to attach Conditions on Tiles Tilemap Layer functions to manipulate Tilemaps","title":"Tiles"},{"location":"Entities/condition/#tiles","text":"","title":"Tiles"},{"location":"Entities/condition/#introduction","text":"Those Entities are detrimental for the Gameworld. Much more than simple textures are here saved, they hold all data needed to interact with its Enviroment and to react on it. Tiles are in P@tnicroom as complex as your typical NPC. Their Components are constantly under the influence of Effects and Actions. The most important Components are:","title":"Introduction"},{"location":"Entities/condition/#universal-components","text":"The following Components are the lowest common anominator for Tiles.","title":"universal Components"},{"location":"Entities/condition/#spacial","text":"","title":"Spacial"},{"location":"Entities/condition/#influencial","text":"","title":"Influencial"},{"location":"Entities/condition/#general","text":"","title":"General"},{"location":"Entities/condition/#quickreferences","text":"","title":"Quickreferences"},{"location":"Entities/effect/","text":"Tiles Introduction Those Entities are detrimental for the Gameworld. Much more than simple textures are here saved, they hold all data needed to interact with its Enviroment and to react on it. Tiles are in P@tnicroom as complex as your typical NPC. Their Components are constantly under the influence of Effects and Actions. The most important Components are: Component-name Usage C_67_ANY_POSITION selecting for kits C_2_TEXTURE_ID indexing for Templates C_1_ANY_IS_WALKABLE Acessabillity for Actors universal Components The following Components are the lowest common anominator for Tiles. General function Type Usage Notation description String fluff and lore shown in onlook-action recommended length is 40 characters at max textureID String toString() of staticTilesetNR is a convention of 3 fields with \"_\" as IFS: Tileset_Row_Collumn layer Integer name of layer where its mapped convention of ENUM.SOKRATILES_LAYER. X _GROUND X for MEAT MATRIX MAGIC tileName String oneliner reference recommended length is 2 words at max staticTilesetNR Integer index number of corresponding Texture not recommended for freqeunt use. please use textureID for improved readabillity. Spacial function Type Usage Notation type ENUM identifier to differenciate from other entities convention of ENUM.TYPES_ON_MAP.TILE isWalkable BOOLEAN Determinds if Actors can stand on Tile mouseHover_quack String duck-typed proxy-function to show on Mousehover pos Vector2 position of Entity on x and y on Tilemap posX and posY can be for single getter. Are Converted from Double to Integer! Influencial function Type Usage Notation matrixNoise Integer negative modifier for sourrunding Electronics WIP magicNoise Integer negative modifier for sourrunding Magics WIP Quickreferences Keyword Description Tile Atlas All Tiles and their Attributes Texture Atlas All Tiles and their Attributes Apply Conditions Types of triggers to attach Conditions on Tiles Tilemap Layer functions to manipulate Tilemaps","title":"Tiles"},{"location":"Entities/effect/#tiles","text":"","title":"Tiles"},{"location":"Entities/effect/#introduction","text":"Those Entities are detrimental for the Gameworld. Much more than simple textures are here saved, they hold all data needed to interact with its Enviroment and to react on it. Tiles are in P@tnicroom as complex as your typical NPC. Their Components are constantly under the influence of Effects and Actions. The most important Components are:","title":"Introduction"},{"location":"Entities/effect/#universal-components","text":"The following Components are the lowest common anominator for Tiles.","title":"universal Components"},{"location":"Entities/effect/#general","text":"","title":"General"},{"location":"Entities/effect/#spacial","text":"","title":"Spacial"},{"location":"Entities/effect/#influencial","text":"","title":"Influencial"},{"location":"Entities/effect/#quickreferences","text":"","title":"Quickreferences"},{"location":"Entities/interact/","text":"Tiles Introduction Those Entities are detrimental for the Gameworld. Much more than simple textures are here saved, they hold all data needed to interact with its Enviroment and to react on it. Tiles are in P@tnicroom as complex as your typical NPC. Their Components are constantly under the influence of Effects and Actions. The most important Components are: Component-name Usage C_67_ANY_POSITION selecting for kits C_2_TEXTURE_ID indexing for Templates C_1_ANY_IS_WALKABLE Acessabillity for Actors universal Components The following Components are the lowest common anominator for Tiles. General function Type Usage Notation description String fluff and lore shown in onlook-action recommended length is 40 characters at max textureID String toString() of staticTilesetNR is a convention of 3 fields with \"_\" as IFS: Tileset_Row_Collumn layer Integer name of layer where its mapped convention of ENUM.SOKRATILES_LAYER. X _GROUND X for MEAT MATRIX MAGIC tileName String oneliner reference recommended length is 2 words at max staticTilesetNR Integer index number of corresponding Texture not recommended for freqeunt use. please use textureID for improved readabillity. Spacial function Type Usage Notation type ENUM identifier to differenciate from other entities convention of ENUM.TYPES_ON_MAP.TILE isWalkable BOOLEAN Determinds if Actors can stand on Tile mouseHover_quack String duck-typed proxy-function to show on Mousehover pos Vector2 position of Entity on x and y on Tilemap posX and posY can be for single getter. Are Converted from Double to Integer! Influencial function Type Usage Notation matrixNoise Integer negative modifier for sourrunding Electronics WIP magicNoise Integer negative modifier for sourrunding Magics WIP Quickreferences Keyword Description Tile Atlas All Tiles and their Attributes Texture Atlas All Tiles and their Attributes Apply Conditions Types of triggers to attach Conditions on Tiles Tilemap Layer functions to manipulate Tilemaps","title":"Tiles"},{"location":"Entities/interact/#tiles","text":"","title":"Tiles"},{"location":"Entities/interact/#introduction","text":"Those Entities are detrimental for the Gameworld. Much more than simple textures are here saved, they hold all data needed to interact with its Enviroment and to react on it. Tiles are in P@tnicroom as complex as your typical NPC. Their Components are constantly under the influence of Effects and Actions. The most important Components are:","title":"Introduction"},{"location":"Entities/interact/#universal-components","text":"The following Components are the lowest common anominator for Tiles.","title":"universal Components"},{"location":"Entities/interact/#general","text":"","title":"General"},{"location":"Entities/interact/#spacial","text":"","title":"Spacial"},{"location":"Entities/interact/#influencial","text":"","title":"Influencial"},{"location":"Entities/interact/#quickreferences","text":"","title":"Quickreferences"},{"location":"Entities/kitpart/","text":"Tiles Introduction Those Entities are detrimental for the Gameworld. Much more than simple textures are here saved, they hold all data needed to interact with its Enviroment and to react on it. Tiles are in P@tnicroom as complex as your typical NPC. Their Components are constantly under the influence of Effects and Actions. The most important Components are: Component-name Usage C_67_ANY_POSITION selecting for kits C_2_TEXTURE_ID indexing for Templates C_1_ANY_IS_WALKABLE Acessabillity for Actors universal Components The following Components are the lowest common anominator for Tiles. General function Type Usage Notation description String fluff and lore shown in onlook-action recommended length is 40 characters at max textureID String toString() of staticTilesetNR is a convention of 3 fields with \"_\" as IFS: Tileset_Row_Collumn layer Integer name of layer where its mapped convention of ENUM.SOKRATILES_LAYER. X _GROUND X for MEAT MATRIX MAGIC tileName String oneliner reference recommended length is 2 words at max staticTilesetNR Integer index number of corresponding Texture not recommended for freqeunt use. please use textureID for improved readabillity. Spacial function Type Usage Notation type ENUM identifier to differenciate from other entities convention of ENUM.TYPES_ON_MAP.TILE isWalkable BOOLEAN Determinds if Actors can stand on Tile mouseHover_quack String duck-typed proxy-function to show on Mousehover pos Vector2 position of Entity on x and y on Tilemap posX and posY can be for single getter. Are Converted from Double to Integer! Influencial function Type Usage Notation matrixNoise Integer negative modifier for sourrunding Electronics WIP magicNoise Integer negative modifier for sourrunding Magics WIP Quickreferences Keyword Description Tile Atlas All Tiles and their Attributes Texture Atlas All Tiles and their Attributes Apply Conditions Types of triggers to attach Conditions on Tiles Tilemap Layer functions to manipulate Tilemaps","title":"Tiles"},{"location":"Entities/kitpart/#tiles","text":"","title":"Tiles"},{"location":"Entities/kitpart/#introduction","text":"Those Entities are detrimental for the Gameworld. Much more than simple textures are here saved, they hold all data needed to interact with its Enviroment and to react on it. Tiles are in P@tnicroom as complex as your typical NPC. Their Components are constantly under the influence of Effects and Actions. The most important Components are:","title":"Introduction"},{"location":"Entities/kitpart/#universal-components","text":"The following Components are the lowest common anominator for Tiles.","title":"universal Components"},{"location":"Entities/kitpart/#general","text":"","title":"General"},{"location":"Entities/kitpart/#spacial","text":"","title":"Spacial"},{"location":"Entities/kitpart/#influencial","text":"","title":"Influencial"},{"location":"Entities/kitpart/#quickreferences","text":"","title":"Quickreferences"},{"location":"Entities/symbiotic/","text":"Tiles Introduction Those Entities are detrimental for the Gameworld. Much more than simple textures are here saved, they hold all data needed to interact with its Enviroment and to react on it. Tiles are in P@tnicroom as complex as your typical NPC. Their Components are constantly under the influence of Effects and Actions. The most important Components are: Component-name Usage C_67_ANY_POSITION selecting for kits C_2_TEXTURE_ID indexing for Templates C_1_ANY_IS_WALKABLE Acessabillity for Actors universal Components The following Components are the lowest common anominator for Tiles. General function Type Usage Notation description String fluff and lore shown in onlook-action recommended length is 40 characters at max textureID String toString() of staticTilesetNR is a convention of 3 fields with \"_\" as IFS: Tileset_Row_Collumn layer Integer name of layer where its mapped convention of ENUM.SOKRATILES_LAYER. X _GROUND X for MEAT MATRIX MAGIC tileName String oneliner reference recommended length is 2 words at max staticTilesetNR Integer index number of corresponding Texture not recommended for freqeunt use. please use textureID for improved readabillity. Spacial function Type Usage Notation type ENUM identifier to differenciate from other entities convention of ENUM.TYPES_ON_MAP.TILE isWalkable BOOLEAN Determinds if Actors can stand on Tile mouseHover_quack String duck-typed proxy-function to show on Mousehover pos Vector2 position of Entity on x and y on Tilemap posX and posY can be for single getter. Are Converted from Double to Integer! Influencial function Type Usage Notation matrixNoise Integer negative modifier for sourrunding Electronics WIP magicNoise Integer negative modifier for sourrunding Magics WIP Quickreferences Keyword Description Tile Atlas All Tiles and their Attributes Texture Atlas All Tiles and their Attributes Apply Conditions Types of triggers to attach Conditions on Tiles Tilemap Layer functions to manipulate Tilemaps","title":"Tiles"},{"location":"Entities/symbiotic/#tiles","text":"","title":"Tiles"},{"location":"Entities/symbiotic/#introduction","text":"Those Entities are detrimental for the Gameworld. Much more than simple textures are here saved, they hold all data needed to interact with its Enviroment and to react on it. Tiles are in P@tnicroom as complex as your typical NPC. Their Components are constantly under the influence of Effects and Actions. The most important Components are:","title":"Introduction"},{"location":"Entities/symbiotic/#universal-components","text":"The following Components are the lowest common anominator for Tiles.","title":"universal Components"},{"location":"Entities/symbiotic/#general","text":"","title":"General"},{"location":"Entities/symbiotic/#spacial","text":"","title":"Spacial"},{"location":"Entities/symbiotic/#influencial","text":"","title":"Influencial"},{"location":"Entities/symbiotic/#quickreferences","text":"","title":"Quickreferences"},{"location":"Entities/tile/","text":"Tiles Introduction Those Entities are detrimental for the Gameworld. Much more than simple textures are here saved, they hold all data needed to interact with its Enviroment and to react on it. Tiles are in P@tnicroom as complex as your typical NPC. Their Components are constantly under the influence of Effects and Actions. The most important Components are: Component-name Usage C_67_ANY_POSITION selecting for kits C_2_TEXTURE_ID indexing for Templates C_1_ANY_IS_WALKABLE Acessabillity for Actors universal Components The following Components are the lowest common anominator for Tiles. General function Type Usage Notation description String fluff and lore shown in onlook-action recommended length is 40 characters at max textureID String toString() of staticTilesetNR is a convention of 3 fields with \"_\" as IFS: Tileset_Row_Collumn layer Integer name of layer where its mapped convention of ENUM.SOKRATILES_LAYER. X _GROUND X for MEAT MATRIX MAGIC tileName String oneliner reference recommended length is 2 words at max staticTilesetNR Integer index number of corresponding Texture not recommended for freqeunt use. please use textureID for improved readabillity. Spacial function Type Usage Notation type ENUM identifier to differenciate from other entities convention of ENUM.TYPES_ON_MAP.TILE isWalkable BOOLEAN Determinds if Actors can stand on Tile mouseHover_quack String duck-typed proxy-function to show on Mousehover pos Vector2 position of Entity on x and y on Tilemap posX and posY can be for single getter. Are Converted from Double to Integer! Influencial function Type Usage Notation matrixNoise Integer negative modifier for sourrunding Electronics WIP magicNoise Integer negative modifier for sourrunding Magics WIP Quickreferences Keyword Description Tile Atlas All Tiles and their Attributes Texture Atlas All Tiles and their Attributes Apply Conditions Types of triggers to attach Conditions on Tiles Tilemap Layer functions to manipulate Tilemaps","title":"Tiles"},{"location":"Entities/tile/#tiles","text":"","title":"Tiles"},{"location":"Entities/tile/#introduction","text":"Those Entities are detrimental for the Gameworld. Much more than simple textures are here saved, they hold all data needed to interact with its Enviroment and to react on it. Tiles are in P@tnicroom as complex as your typical NPC. Their Components are constantly under the influence of Effects and Actions. The most important Components are:","title":"Introduction"},{"location":"Entities/tile/#universal-components","text":"The following Components are the lowest common anominator for Tiles.","title":"universal Components"},{"location":"Entities/tile/#general","text":"","title":"General"},{"location":"Entities/tile/#spacial","text":"","title":"Spacial"},{"location":"Entities/tile/#influencial","text":"","title":"Influencial"},{"location":"Entities/tile/#quickreferences","text":"","title":"Quickreferences"},{"location":"Modules/001/","text":"001 - Atlas Summary This Module is a Library for all serialiced data ordered by the Entity-type. Every Sub-atlas of Entities is its Own Class, so it can be tailored for each needs. API All functions of this API are getter of some sort. diamonds ( < x : y > ) in a notation describes the key-vlaue-pair. Tiles function Return Type Notation TileAtlas() Dictionary < C_2_ANY_TEXTURE_ID : TileEntity> TileSetAtlas() Dictionary < tilesetName : < C_2_ANY_TEXTURE_ID : TileEntities > > getTileByTextureID(String) TileEntity 1st Parameter : C_2_ANY_TEXTURE_ID KitParts function Return Type Notation getKitGroup(String) Dictionary 1st Parameter of convention ENUM.KIT_CATEGORY. X getKitByDrirectName(String) KitPartEntity 1st Parameter : C_6_TILE_NAME Actor Attributes function Return Type Notation RoleAtlas() Dictionary < C_2_ANY_TEXTURE_ID : TileEntity> RacesAtlas() Dictionary < C_2_ANY_TEXTURE_ID : TileEntity> RacesAtlas() Dictionary < C_2_ANY_TEXTURE_ID : TileEntity> Systems System-name Notations Tiles Interactables KitParts Roles Races Specialties Manager","title":"001 - Atlas"},{"location":"Modules/001/#001-atlas","text":"","title":"001 - Atlas"},{"location":"Modules/001/#summary","text":"This Module is a Library for all serialiced data ordered by the Entity-type. Every Sub-atlas of Entities is its Own Class, so it can be tailored for each needs.","title":"Summary"},{"location":"Modules/001/#api","text":"All functions of this API are getter of some sort. diamonds ( < x : y > ) in a notation describes the key-vlaue-pair.","title":"API"},{"location":"Modules/001/#tiles","text":"","title":"Tiles"},{"location":"Modules/001/#kitparts","text":"","title":"KitParts"},{"location":"Modules/001/#actor-attributes","text":"","title":"Actor Attributes"},{"location":"Modules/001/#systems","text":"","title":"Systems"},{"location":"Modules/001/#manager","text":"","title":"Manager"},{"location":"Modules/002/","text":"002 - Tilemap Structure Summary API Systems Manager","title":"002 - Tilemap Structure"},{"location":"Modules/002/#002-tilemap-structure","text":"","title":"002 - Tilemap Structure"},{"location":"Modules/002/#summary","text":"","title":"Summary"},{"location":"Modules/002/#api","text":"","title":"API"},{"location":"Modules/002/#systems","text":"","title":"Systems"},{"location":"Modules/002/#manager","text":"","title":"Manager"},{"location":"Modules/003/","text":"003 Summary API Systems Manager","title":"003"},{"location":"Modules/003/#003","text":"","title":"003"},{"location":"Modules/003/#summary","text":"","title":"Summary"},{"location":"Modules/003/#api","text":"","title":"API"},{"location":"Modules/003/#systems","text":"","title":"Systems"},{"location":"Modules/003/#manager","text":"","title":"Manager"},{"location":"Modules/004/","text":"001 - Atlas Summary API Systems Manager","title":"001 - Atlas"},{"location":"Modules/004/#001-atlas","text":"","title":"001 - Atlas"},{"location":"Modules/004/#summary","text":"","title":"Summary"},{"location":"Modules/004/#api","text":"","title":"API"},{"location":"Modules/004/#systems","text":"","title":"Systems"},{"location":"Modules/004/#manager","text":"","title":"Manager"},{"location":"Modules/005/","text":"001 - Atlas Summary API Systems Manager","title":"001 - Atlas"},{"location":"Modules/005/#001-atlas","text":"","title":"001 - Atlas"},{"location":"Modules/005/#summary","text":"","title":"Summary"},{"location":"Modules/005/#api","text":"","title":"API"},{"location":"Modules/005/#systems","text":"","title":"Systems"},{"location":"Modules/005/#manager","text":"","title":"Manager"},{"location":"Modules/006/","text":"001 - Atlas Summary API Systems Manager","title":"001 - Atlas"},{"location":"Modules/006/#001-atlas","text":"","title":"001 - Atlas"},{"location":"Modules/006/#summary","text":"","title":"Summary"},{"location":"Modules/006/#api","text":"","title":"API"},{"location":"Modules/006/#systems","text":"","title":"Systems"},{"location":"Modules/006/#manager","text":"","title":"Manager"},{"location":"Modules/007/","text":"001 - Atlas Summary API Systems Manager","title":"001 - Atlas"},{"location":"Modules/007/#001-atlas","text":"","title":"001 - Atlas"},{"location":"Modules/007/#summary","text":"","title":"Summary"},{"location":"Modules/007/#api","text":"","title":"API"},{"location":"Modules/007/#systems","text":"","title":"Systems"},{"location":"Modules/007/#manager","text":"","title":"Manager"},{"location":"Modules/008/","text":"001 - Atlas Summary API Systems Manager","title":"001 - Atlas"},{"location":"Modules/008/#001-atlas","text":"","title":"001 - Atlas"},{"location":"Modules/008/#summary","text":"","title":"Summary"},{"location":"Modules/008/#api","text":"","title":"API"},{"location":"Modules/008/#systems","text":"","title":"Systems"},{"location":"Modules/008/#manager","text":"","title":"Manager"},{"location":"Modules/009/","text":"001 - Atlas Summary API Systems Manager","title":"001 - Atlas"},{"location":"Modules/009/#001-atlas","text":"","title":"001 - Atlas"},{"location":"Modules/009/#summary","text":"","title":"Summary"},{"location":"Modules/009/#api","text":"","title":"API"},{"location":"Modules/009/#systems","text":"","title":"Systems"},{"location":"Modules/009/#manager","text":"","title":"Manager"},{"location":"Modules/010/","text":"001 - Atlas Summary API Systems Manager","title":"001 - Atlas"},{"location":"Modules/010/#001-atlas","text":"","title":"001 - Atlas"},{"location":"Modules/010/#summary","text":"","title":"Summary"},{"location":"Modules/010/#api","text":"","title":"API"},{"location":"Modules/010/#systems","text":"","title":"Systems"},{"location":"Modules/010/#manager","text":"","title":"Manager"},{"location":"Modules/011/","text":"001 - Atlas Summary API Systems Manager","title":"001 - Atlas"},{"location":"Modules/011/#001-atlas","text":"","title":"001 - Atlas"},{"location":"Modules/011/#summary","text":"","title":"Summary"},{"location":"Modules/011/#api","text":"","title":"API"},{"location":"Modules/011/#systems","text":"","title":"Systems"},{"location":"Modules/011/#manager","text":"","title":"Manager"},{"location":"Modules/012/","text":"001 - Atlas Summary API Systems Manager","title":"001 - Atlas"},{"location":"Modules/012/#001-atlas","text":"","title":"001 - Atlas"},{"location":"Modules/012/#summary","text":"","title":"Summary"},{"location":"Modules/012/#api","text":"","title":"API"},{"location":"Modules/012/#systems","text":"","title":"Systems"},{"location":"Modules/012/#manager","text":"","title":"Manager"},{"location":"Modules/013/","text":"001 - Atlas Summary API Systems Manager","title":"001 - Atlas"},{"location":"Modules/013/#001-atlas","text":"","title":"001 - Atlas"},{"location":"Modules/013/#summary","text":"","title":"Summary"},{"location":"Modules/013/#api","text":"","title":"API"},{"location":"Modules/013/#systems","text":"","title":"Systems"},{"location":"Modules/013/#manager","text":"","title":"Manager"},{"location":"Modules/014/","text":"001 - Atlas Summary API Systems Manager","title":"001 - Atlas"},{"location":"Modules/014/#001-atlas","text":"","title":"001 - Atlas"},{"location":"Modules/014/#summary","text":"","title":"Summary"},{"location":"Modules/014/#api","text":"","title":"API"},{"location":"Modules/014/#systems","text":"","title":"Systems"},{"location":"Modules/014/#manager","text":"","title":"Manager"},{"location":"Modules/015/","text":"001 - Atlas Summary API Systems Manager","title":"001 - Atlas"},{"location":"Modules/015/#001-atlas","text":"","title":"001 - Atlas"},{"location":"Modules/015/#summary","text":"","title":"Summary"},{"location":"Modules/015/#api","text":"","title":"API"},{"location":"Modules/015/#systems","text":"","title":"Systems"},{"location":"Modules/015/#manager","text":"","title":"Manager"},{"location":"Modules/016/","text":"001 - Atlas Summary API Systems Manager","title":"001 - Atlas"},{"location":"Modules/016/#001-atlas","text":"","title":"001 - Atlas"},{"location":"Modules/016/#summary","text":"","title":"Summary"},{"location":"Modules/016/#api","text":"","title":"API"},{"location":"Modules/016/#systems","text":"","title":"Systems"},{"location":"Modules/016/#manager","text":"","title":"Manager"},{"location":"Syntax/effectDetails/","text":"Phases 1. SPAWN determinds the events between player presses enter and its effect is shown on map 2. ONSET determinds the events between the travel of effect to its target and their hit 3. EFFECT determinds the events between the actual hit and the end of its main effects 3. OFFSET determinds the events between the last main effect and its disapearing of the Map Time Slot [!IMPORTANT] All of the following entries are mandatory, the following slots can be left not written if their corresponding timeslot has the value: \"N/A\" KeyName possible Inputs Comment TIME-0 number as String for rounds of actions SPAWN -phase TIME-1 number as String for rounds of actions ONSET -phase TIME-2 number as String for rounds of actions EFFECT -phase TIME-3 number as String for rounds of actions OFFSET -phase Trigger Slot [!NOTE] each timeslot needs its own JSON-Object with the key \"TRIGGER-X\" with X for the number of the timeslot seen above KeyName possible Inputs Comment BASE \"TILE\" , \"ACTOR\" , \"INTERACT\" , \"INTERACT_ACTOR\" , \"TILE_ACTOR\" , \"TILE_ACTOR\" , \"ACTOR\" describes which type of entities will be selected of the Effect, underscore means both types SPECIFIC narrows down select of the the BASE-type by validating following possibillities: BASE uses the standard select from base HAS_CONDITION String of name of Condition-Class HAS_STAT Array of three with name of ComponentClass,operator and value to validate [\"C_1_IS_WALKABLE\",\"=\",\"true\"] HAS_TEXTURE String of Component C_2_ANY_TEXTURE_ID CHANCE number from 0 up to 100 for its possibillity to trigger Space Slot KeyName possible Inputs Comment BASE \"TILE\" , \"ACTOR\" , \"INTERACT\" , \"INTERACT_ACTOR\" , \"TILE_ACTOR\" , \"TILE_ACTOR\" , \"ACTOR\" describes which type of entities will be selected of the Effect, underscore means both types SPECIFIC narrows down select of the the BASE-type by validating following possibillities: BASE uses the standard select from base HAS_CONDITION String of name of Condition-Class HAS_STAT Array of three with name of ComponentClass,operator and value to validate [\"C_1_IS_WALKABLE\",\"=\",\"true\"] HAS_TEXTURE String of Component C_2_ANY_TEXTURE_ID CHANCE number from 0 up to 100 for its possibillity to trigger Effect Slot KeyName possible Inputs Comment BASE \"TILE\" , \"ACTOR\" , \"INTERACT\" , \"INTERACT_ACTOR\" , \"TILE_ACTOR\" , \"TILE_ACTOR\" , \"ACTOR\" describes which type of entities will be selected of the Effect, underscore means both types SPECIFIC narrows down select of the the BASE-type by validating following possibillities: BASE uses the standard select from base HAS_CONDITION String of name of Condition-Class HAS_STAT Array of three with name of ComponentClass,operator and value to validate [\"C_1_IS_WALKABLE\",\"=\",\"true\"] HAS_TEXTURE String of Component C_2_ANY_TEXTURE_ID CHANCE number from 0 up to 100 for its possibillity to trigger","title":"effectDetails"},{"location":"Syntax/effectDetails/#phases","text":"","title":"Phases"},{"location":"Syntax/effectDetails/#1-spawn","text":"determinds the events between player presses enter and its effect is shown on map","title":"1. SPAWN"},{"location":"Syntax/effectDetails/#2-onset","text":"determinds the events between the travel of effect to its target and their hit","title":"2. ONSET"},{"location":"Syntax/effectDetails/#3-effect","text":"determinds the events between the actual hit and the end of its main effects","title":"3. EFFECT"},{"location":"Syntax/effectDetails/#3-offset","text":"determinds the events between the last main effect and its disapearing of the Map","title":"3. OFFSET"},{"location":"Syntax/effectDetails/#time-slot","text":"[!IMPORTANT] All of the following entries are mandatory, the following slots can be left not written if their corresponding timeslot has the value: \"N/A\" KeyName possible Inputs Comment TIME-0 number as String for rounds of actions SPAWN -phase TIME-1 number as String for rounds of actions ONSET -phase TIME-2 number as String for rounds of actions EFFECT -phase TIME-3 number as String for rounds of actions OFFSET -phase","title":"Time Slot"},{"location":"Syntax/effectDetails/#trigger-slot","text":"[!NOTE] each timeslot needs its own JSON-Object with the key \"TRIGGER-X\" with X for the number of the timeslot seen above KeyName possible Inputs Comment BASE \"TILE\" , \"ACTOR\" , \"INTERACT\" , \"INTERACT_ACTOR\" , \"TILE_ACTOR\" , \"TILE_ACTOR\" , \"ACTOR\" describes which type of entities will be selected of the Effect, underscore means both types SPECIFIC narrows down select of the the BASE-type by validating following possibillities: BASE uses the standard select from base HAS_CONDITION String of name of Condition-Class HAS_STAT Array of three with name of ComponentClass,operator and value to validate [\"C_1_IS_WALKABLE\",\"=\",\"true\"] HAS_TEXTURE String of Component C_2_ANY_TEXTURE_ID CHANCE number from 0 up to 100 for its possibillity to trigger","title":"Trigger Slot"},{"location":"Syntax/effectDetails/#space-slot","text":"KeyName possible Inputs Comment BASE \"TILE\" , \"ACTOR\" , \"INTERACT\" , \"INTERACT_ACTOR\" , \"TILE_ACTOR\" , \"TILE_ACTOR\" , \"ACTOR\" describes which type of entities will be selected of the Effect, underscore means both types SPECIFIC narrows down select of the the BASE-type by validating following possibillities: BASE uses the standard select from base HAS_CONDITION String of name of Condition-Class HAS_STAT Array of three with name of ComponentClass,operator and value to validate [\"C_1_IS_WALKABLE\",\"=\",\"true\"] HAS_TEXTURE String of Component C_2_ANY_TEXTURE_ID CHANCE number from 0 up to 100 for its possibillity to trigger","title":"Space Slot"},{"location":"Syntax/effectDetails/#effect-slot","text":"KeyName possible Inputs Comment BASE \"TILE\" , \"ACTOR\" , \"INTERACT\" , \"INTERACT_ACTOR\" , \"TILE_ACTOR\" , \"TILE_ACTOR\" , \"ACTOR\" describes which type of entities will be selected of the Effect, underscore means both types SPECIFIC narrows down select of the the BASE-type by validating following possibillities: BASE uses the standard select from base HAS_CONDITION String of name of Condition-Class HAS_STAT Array of three with name of ComponentClass,operator and value to validate [\"C_1_IS_WALKABLE\",\"=\",\"true\"] HAS_TEXTURE String of Component C_2_ANY_TEXTURE_ID CHANCE number from 0 up to 100 for its possibillity to trigger","title":"Effect  Slot"},{"location":"Syntax/effectOverview/","text":"JSON Konvention Namings Collumns of EffektEntity (TIME,TRIGGER,SPACE,EFFECT) are called Slots Rows of EffektEntity (like SPAWN,ONSET,HIT,OFFSET) are called Units TIME-Slot N/A -> Not available, will jump to the next Unit of Slots 0 -> Till be triggered at the instant the UserInput is pressed X -> Times of UserInputs before its triggered TRIGGER-Slot BASE -> Necessary field,describes the method of triggering PROJECTILE_HIT -> Effect travels over Tilemap and will be activated by actor or interactable when they match their position SELF -> When being self,almost every time triggering,except if mental stunned TOUCHING -> Effects will be activated by staying next to the wanted posiition and selecting its direction SELECT -> Selects all marked Tiles SPECIFIC -> Further conditions, things in brackets have to be on the right side sepratet with \"_\" BASE -> No further specification HAS_CONDITION(X) -> Name Of Condition it should check before it uses its Condition/statmod on the right side HAS_STAT(X)(y)(z) -> Is triggered when the X stat of target Y-comparator is true to Z CHANCE(X) -> Can only be used after another Unit of Slots and will trigger by X percent TILE_WHEN_REACHED SPACE-Slot MEDIUM -> Way of travel to the target LINEA -> From SOURCE to Crosshair-select AREA -> From SOURCE to Area-select LINEA_AREA -> From SOURCE to Crosshair-select and from there Area-select, separated by \"_\" SELECT -> needs TRIGGER-SPECIFIC , selects everything that HAS_X SELF -> to Player TARGET -> to last selected target SOURCE -> Starting Position on Tilemap SELF -> starts at player and counts from there LAST_HIT -> starts from hit of the Last Slot TARGET -> to last selected target LAST_TARGET-> starts from target of Last Slot,regardless of SPECIFIC was met REACH -> X on the right side for number of Tiles it travels M_TYPE -> Layer of map for Target-selection MEAT -> MAGIC -> MATRIX -> EFFECT-Slot [CONDITION] -> Is an empty List,needs following 3 decriptors per entry condition name -> Unique Identifier intensity -> Factor of effect,when its static,insert a 0 duration -> Length of Effect in UserInputs [STAT_MOD] -> Is an empty List,needs 2 descriptors per entry statistic name -> Unique Identifier modifier -> Will be inserted as addition","title":"effectOverview"},{"location":"Syntax/effectOverview/#json-konvention","text":"","title":"JSON Konvention"},{"location":"Syntax/effectOverview/#namings","text":"Collumns of EffektEntity (TIME,TRIGGER,SPACE,EFFECT) are called Slots Rows of EffektEntity (like SPAWN,ONSET,HIT,OFFSET) are called Units","title":"Namings"},{"location":"Syntax/effectOverview/#time-slot","text":"N/A -> Not available, will jump to the next Unit of Slots 0 -> Till be triggered at the instant the UserInput is pressed X -> Times of UserInputs before its triggered","title":"TIME-Slot"},{"location":"Syntax/effectOverview/#trigger-slot","text":"BASE -> Necessary field,describes the method of triggering PROJECTILE_HIT -> Effect travels over Tilemap and will be activated by actor or interactable when they match their position SELF -> When being self,almost every time triggering,except if mental stunned TOUCHING -> Effects will be activated by staying next to the wanted posiition and selecting its direction SELECT -> Selects all marked Tiles SPECIFIC -> Further conditions, things in brackets have to be on the right side sepratet with \"_\" BASE -> No further specification HAS_CONDITION(X) -> Name Of Condition it should check before it uses its Condition/statmod on the right side HAS_STAT(X)(y)(z) -> Is triggered when the X stat of target Y-comparator is true to Z CHANCE(X) -> Can only be used after another Unit of Slots and will trigger by X percent TILE_WHEN_REACHED","title":"TRIGGER-Slot"},{"location":"Syntax/effectOverview/#space-slot","text":"MEDIUM -> Way of travel to the target LINEA -> From SOURCE to Crosshair-select AREA -> From SOURCE to Area-select LINEA_AREA -> From SOURCE to Crosshair-select and from there Area-select, separated by \"_\" SELECT -> needs TRIGGER-SPECIFIC , selects everything that HAS_X SELF -> to Player TARGET -> to last selected target SOURCE -> Starting Position on Tilemap SELF -> starts at player and counts from there LAST_HIT -> starts from hit of the Last Slot TARGET -> to last selected target LAST_TARGET-> starts from target of Last Slot,regardless of SPECIFIC was met REACH -> X on the right side for number of Tiles it travels M_TYPE -> Layer of map for Target-selection MEAT -> MAGIC -> MATRIX ->","title":"SPACE-Slot"},{"location":"Syntax/effectOverview/#effect-slot","text":"[CONDITION] -> Is an empty List,needs following 3 decriptors per entry condition name -> Unique Identifier intensity -> Factor of effect,when its static,insert a 0 duration -> Length of Effect in UserInputs [STAT_MOD] -> Is an empty List,needs 2 descriptors per entry statistic name -> Unique Identifier modifier -> Will be inserted as addition","title":"EFFECT-Slot"},{"location":"Syntax/lootTables/","text":"Keyword kitpart credits item Kitpart Keyword Usage Mandatory possible Inputs KITPART_TYPE X BASE,MOD,APPENDIX M_TYPE X MAGIC,MEAT,MATRIX relevance X NEW,IMPROVING KIT_CAT X GUN,MEELE,CYBERWARE,HACK,INFUSION,SPELL","title":"lootTables"},{"location":"Syntax/lootTables/#keyword","text":"kitpart credits item","title":"Keyword"},{"location":"Syntax/lootTables/#kitpart","text":"Keyword Usage Mandatory possible Inputs KITPART_TYPE X BASE,MOD,APPENDIX M_TYPE X MAGIC,MEAT,MATRIX relevance X NEW,IMPROVING KIT_CAT X GUN,MEELE,CYBERWARE,HACK,INFUSION,SPELL","title":"Kitpart"}]}